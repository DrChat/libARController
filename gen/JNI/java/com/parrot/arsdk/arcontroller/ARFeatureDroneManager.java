/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureDroneManager.java
 * @brief Feature controller allow to send command related of drone_manager Feature.
 * Commands related to the drone_manager feature
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureDroneManager
{
    private static String TAG = "ARFeatureDroneManager";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SERIAL = ""; /**< Key of the argument </code>serial</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_MODEL = ""; /**< Key of the argument </code>model</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_NAME = ""; /**< Key of the argument </code>name</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_CONNECTION_ORDER = ""; /**< Key of the argument </code>connection_order</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_ACTIVE = ""; /**< Key of the argument </code>active</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_VISIBLE = ""; /**< Key of the argument </code>visible</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SECURITY = ""; /**< Key of the argument </code>security</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_HAS_SAVED_KEY = ""; /**< Key of the argument </code>has_saved_key</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_RSSI = ""; /**< Key of the argument </code>rssi</code> of event <code>DroneListItem</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_STATE = ""; /**< Key of the argument </code>state</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_SERIAL = ""; /**< Key of the argument </code>serial</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_MODEL = ""; /**< Key of the argument </code>model</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_NAME = ""; /**< Key of the argument </code>name</code> of event <code>ConnectionState</code> in feature <code>DroneManager</code> */

    private static native String nativeStaticGetKeyDroneManagerDroneListItemSerial ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemModel ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemName ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemConnectionorder ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemActive ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemVisible ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemSecurity ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemHassavedkey ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemRssi ();
    private static native String nativeStaticGetKeyDroneManagerDroneListItemListflags ();
    private static native String nativeStaticGetKeyDroneManagerConnectionStateState ();
    private static native String nativeStaticGetKeyDroneManagerConnectionStateSerial ();
    private static native String nativeStaticGetKeyDroneManagerConnectionStateModel ();
    private static native String nativeStaticGetKeyDroneManagerConnectionStateName ();

    private native int nativeSendDiscoverDrones (long jFeature);
    private native int nativeSendConnect (long jFeature, String serial, String key);
    private native int nativeSendForget (long jFeature, String serial);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SERIAL = nativeStaticGetKeyDroneManagerDroneListItemSerial ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_MODEL = nativeStaticGetKeyDroneManagerDroneListItemModel ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_NAME = nativeStaticGetKeyDroneManagerDroneListItemName ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_CONNECTION_ORDER = nativeStaticGetKeyDroneManagerDroneListItemConnectionorder ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_ACTIVE = nativeStaticGetKeyDroneManagerDroneListItemActive ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_VISIBLE = nativeStaticGetKeyDroneManagerDroneListItemVisible ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_SECURITY = nativeStaticGetKeyDroneManagerDroneListItemSecurity ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_HAS_SAVED_KEY = nativeStaticGetKeyDroneManagerDroneListItemHassavedkey ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_DRONELISTITEM_RSSI = nativeStaticGetKeyDroneManagerDroneListItemRssi ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_STATE = nativeStaticGetKeyDroneManagerConnectionStateState ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_SERIAL = nativeStaticGetKeyDroneManagerConnectionStateSerial ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_MODEL = nativeStaticGetKeyDroneManagerConnectionStateModel ();
        ARCONTROLLER_DICTIONARY_KEY_DRONE_MANAGER_CONNECTIONSTATE_NAME = nativeStaticGetKeyDroneManagerConnectionStateName ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureDroneManager (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>DiscoverDrones</code>
     * Request the drone list.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendDiscoverDrones ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendDiscoverDrones (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>Connect</code>
     * Request connection to a specific drone. Override the auto-selected drone.
     * @param serial Serial number of the drone.
     * @param key Security key to use. Ignored if drone security is none. If the drone manager has a saved key for the drone, pass an empty string to use it
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendConnect (String _serial, String _key)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendConnect (jniFeature, _serial, _key);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>Forget</code>
     * Forget the given drone. If the drone is the selected one, the auto-selection will run again.
     * @param serial Serial number to forget.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendForget (String _serial)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendForget (jniFeature, _serial);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

