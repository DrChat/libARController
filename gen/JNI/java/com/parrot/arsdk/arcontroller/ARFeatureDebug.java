/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureDebug.java
 * @brief Feature controller allow to send command related of debug Feature.
 * All commands/events related to the Wifi
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureDebug
{
    private static String TAG = "ARFeatureDebug";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_LISTFLAGS = ""; /**< Key of the argument </code>listFlags</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_ID = ""; /**< Key of the argument </code>id</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_LABEL = ""; /**< Key of the argument </code>label</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_MODE = ""; /**< Key of the argument </code>mode</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MIN = ""; /**< Key of the argument </code>range_min</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MAX = ""; /**< Key of the argument </code>range_max</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_STEP = ""; /**< Key of the argument </code>range_step</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>SettingsInfo</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_ID = ""; /**< Key of the argument </code>id</code> of event <code>SettingsList</code> in feature <code>Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>SettingsList</code> in feature <code>Debug</code> */

    private static native String nativeStaticGetKeyDebugSettingsInfoListFlags ();
    private static native String nativeStaticGetKeyDebugSettingsInfoId ();
    private static native String nativeStaticGetKeyDebugSettingsInfoLabel ();
    private static native String nativeStaticGetKeyDebugSettingsInfoType ();
    private static native String nativeStaticGetKeyDebugSettingsInfoMode ();
    private static native String nativeStaticGetKeyDebugSettingsInfoRangemin ();
    private static native String nativeStaticGetKeyDebugSettingsInfoRangemax ();
    private static native String nativeStaticGetKeyDebugSettingsInfoRangestep ();
    private static native String nativeStaticGetKeyDebugSettingsInfoValue ();
    private static native String nativeStaticGetKeyDebugSettingsListId ();
    private static native String nativeStaticGetKeyDebugSettingsListValue ();

    private native int nativeSendGetAllSettings (long jFeature);
    private native int nativeSendSetSetting (long jFeature, short id, String value);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_LISTFLAGS = nativeStaticGetKeyDebugSettingsInfoListFlags ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_ID = nativeStaticGetKeyDebugSettingsInfoId ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_LABEL = nativeStaticGetKeyDebugSettingsInfoLabel ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_TYPE = nativeStaticGetKeyDebugSettingsInfoType ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_MODE = nativeStaticGetKeyDebugSettingsInfoMode ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MIN = nativeStaticGetKeyDebugSettingsInfoRangemin ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_MAX = nativeStaticGetKeyDebugSettingsInfoRangemax ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_RANGE_STEP = nativeStaticGetKeyDebugSettingsInfoRangestep ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSINFO_VALUE = nativeStaticGetKeyDebugSettingsInfoValue ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_ID = nativeStaticGetKeyDebugSettingsListId ();
        ARCONTROLLER_DICTIONARY_KEY_DEBUG_SETTINGSLIST_VALUE = nativeStaticGetKeyDebugSettingsListValue ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureDebug (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>GetAllSettings</code>
     * Cmd sent by controller to get all settings info (generate "settings_info" events).
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGetAllSettings ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGetAllSettings (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SetSetting</code>
     * Change setting value.
     * Cmd sent by controller to change a writable setting.
     * @param id Setting Id.
     * @param value New setting value (string encoded).
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSetSetting (short _id, String _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSetSetting (jniFeature, _id, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

