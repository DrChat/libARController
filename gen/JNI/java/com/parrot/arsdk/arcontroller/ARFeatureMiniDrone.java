/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureMiniDrone.java
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureMiniDrone
{
    private static String TAG = "ARFeatureMiniDrone";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAutoTakeOffModeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE = ""; /**< Key of the argument </code>mode</code> of event <code>PilotingStateFlyingModeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = ""; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStatePlaneModePitchChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStatePlaneModePitchChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStatePlaneModePitchChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT = ""; /**< Key of the argument </code>present</code> of event <code>SpeedSettingsStateWheelsChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxPlaneModeRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR = ""; /**< Key of the argument </code>motor</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE = ""; /**< Key of the argument </code>enable</code> of event <code>SettingsStateCutOutModeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY = ""; /**< Key of the argument </code>delay</code> of event <code>FloodControlStateFloodControlChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_ID = ""; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE = ""; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_INTENSITY = ""; /**< Key of the argument </code>intensity</code> of event <code>UsbAccessoryStateLightState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_ID = ""; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateClawState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE = ""; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateClawState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_ID = ""; /**< Key of the argument </code>id</code> of event <code>UsbAccessoryStateGunState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE = ""; /**< Key of the argument </code>state</code> of event <code>UsbAccessoryStateGunState</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MASSSTORAGEMEDIASTATE_NBPHOTOSCHANGED_NB_PHOTOS = ""; /**< Key of the argument </code>nb_photos</code> of event <code>MassStorageMediaStateNbPhotosChanged</code> in feature <code>MiniDrone</code> */

    private static native String nativeStaticGetKeyMiniDronePilotingStateFlyingStateChangedState ();
    private static native String nativeStaticGetKeyMiniDronePilotingStateAlertStateChangedState ();
    private static native String nativeStaticGetKeyMiniDronePilotingStateAutoTakeOffModeChangedState ();
    private static native String nativeStaticGetKeyMiniDronePilotingStateFlyingModeChangedMode ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedState ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedMassstorageid ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2State ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2Error ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedEvent ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedError ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMin ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMax ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMin ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMax ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedMin ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateWheelsChangedPresent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedMotor ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedType ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedSoftware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedHardware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedSoftware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedHardware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateCutOutModeChangedEnable ();
    private static native String nativeStaticGetKeyMiniDroneFloodControlStateFloodControlChangedDelay ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateId ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateState ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateIntensity ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateListflags ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateClawStateId ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateClawStateState ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateClawStateListflags ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateGunStateId ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateGunStateState ();
    private static native String nativeStaticGetKeyMiniDroneUsbAccessoryStateGunStateListflags ();
    private static native String nativeStaticGetKeyMiniDroneMassStorageMediaStateNbPhotosChangedNbphotos ();

    private native int nativeSendPilotingFlatTrim (long jFeature);
    private native int nativeSendPilotingTakeOff (long jFeature);
    private native int nativeSendPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestamp);
    private native int nativeSetPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestamp);
    private native int nativeSetPilotingPCMDFlag (long jFeature, byte flag);
    private native int nativeSetPilotingPCMDRoll (long jFeature, byte roll);
    private native int nativeSetPilotingPCMDPitch (long jFeature, byte pitch);
    private native int nativeSetPilotingPCMDYaw (long jFeature, byte yaw);
    private native int nativeSetPilotingPCMDGaz (long jFeature, byte gaz);
    private native int nativeSetPilotingPCMDTimestamp (long jFeature, int timestamp);
    private native int nativeSendPilotingLanding (long jFeature);
    private native int nativeSendPilotingEmergency (long jFeature);
    private native int nativeSendPilotingAutoTakeOffMode (long jFeature, byte state);
    private native int nativeSendPilotingFlyingMode (long jFeature, int mode);
    private native int nativeSendAnimationsFlip (long jFeature, int direction);
    private native int nativeSendAnimationsCap (long jFeature, short offset);
    private native int nativeSendMediaRecordPicture (long jFeature, byte mass_storage_id);
    private native int nativeSendMediaRecordPictureV2 (long jFeature);
    private native int nativeSendPilotingSettingsMaxAltitude (long jFeature, float current);
    private native int nativeSendPilotingSettingsMaxTilt (long jFeature, float current);
    private native int nativeSendPilotingSettingsPlaneModePitch (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxVerticalSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxRotationSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsWheels (long jFeature, byte present);
    private native int nativeSendSpeedSettingsMaxHorizontalSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxPlaneModeRotationSpeed (long jFeature, float current);
    private native int nativeSendSettingsCutOutMode (long jFeature, byte enable);
    private native int nativeSendGPSControllerLatitudeForRun (long jFeature, double latitude);
    private native int nativeSendGPSControllerLongitudeForRun (long jFeature, double longitude);
    private native int nativeSendConfigurationControllerType (long jFeature, String type);
    private native int nativeSendConfigurationControllerName (long jFeature, String name);
    private native int nativeSendUsbAccessoryLightControl (long jFeature, byte id, int mode, byte intensity);
    private native int nativeSendUsbAccessoryClawControl (long jFeature, byte id, int action);
    private native int nativeSendUsbAccessoryGunControl (long jFeature, byte id, int action);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateFlyingStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateAlertStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateAutoTakeOffModeChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE = nativeStaticGetKeyMiniDronePilotingStateFlyingModeChangedMode ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2State ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2Error ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedEvent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_CURRENT = nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_MIN = nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_PLANEMODEPITCHCHANGED_MAX = nativeStaticGetKeyMiniDronePilotingSettingsStatePlaneModePitchChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateWheelsChangedPresent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXPLANEMODEROTATIONSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxPlaneModeRotationSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedMotor ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE = nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE = nativeStaticGetKeyMiniDroneSettingsStateCutOutModeChangedEnable ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY = nativeStaticGetKeyMiniDroneFloodControlStateFloodControlChangedDelay ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_ID = nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateId ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE = nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_INTENSITY = nativeStaticGetKeyMiniDroneUsbAccessoryStateLightStateIntensity ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_ID = nativeStaticGetKeyMiniDroneUsbAccessoryStateClawStateId ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE = nativeStaticGetKeyMiniDroneUsbAccessoryStateClawStateState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_ID = nativeStaticGetKeyMiniDroneUsbAccessoryStateGunStateId ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE = nativeStaticGetKeyMiniDroneUsbAccessoryStateGunStateState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MASSSTORAGEMEDIASTATE_NBPHOTOSCHANGED_NB_PHOTOS = nativeStaticGetKeyMiniDroneMassStorageMediaStateNbPhotosChangedNbphotos ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureMiniDrone (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>PilotingFlatTrim</code>
     * Do a flat trim
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingFlatTrim ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingFlatTrim (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingTakeOff</code>
     * Ask the drone to take off
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingTakeOff ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingTakeOff (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingPCMD</code>
     * Ask the drone to move around.
     * @param flag Boolean flag to activate roll/pitch movement
     * @param roll Roll consign for the MiniDrone [-100;100]
     * @param pitch Pitch consign for the MiniDrone [-100;100]
     * @param yaw Yaw consign for the MiniDrone [-100;100]
     * @param gaz Gaz consign for the MiniDrone [-100;100]
     * @param timestamp Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion).
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDFlag (byte _flag)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDFlag (jniFeature, _flag);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDRoll (byte _roll)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDRoll (jniFeature, _roll);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDPitch (byte _pitch)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDPitch (jniFeature, _pitch);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDYaw (byte _yaw)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDYaw (jniFeature, _yaw);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDGaz (byte _gaz)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDGaz (jniFeature, _gaz);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDTimestamp (int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDTimestamp (jniFeature, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingLanding</code>
     * Ask the MiniDrone to land
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingLanding ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingLanding (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingEmergency</code>
     * Put drone in emergency state
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingEmergency ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingEmergency (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingAutoTakeOffMode</code>
     * Set MiniDrone automatic take off mode
     * @param state State of automatic take off mode
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingAutoTakeOffMode (byte _state)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingAutoTakeOffMode (jniFeature, _state);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingFlyingMode</code>
     * Set drone FlyingMode. Only supported by WingX
     * @param mode Drone Flying Mode
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingFlyingMode (ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_ENUM _mode)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingFlyingMode (jniFeature, _mode.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsFlip</code>
     * Make a flip
     * @param direction Direction for the flip
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsFlip (ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_ENUM _direction)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsFlip (jniFeature, _direction.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsCap</code>
     * Change the product cap
     * @param offset Change the cap with offset angle [-180;180]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsCap (short _offset)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsCap (jniFeature, _offset);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordPicture</code>
     * @deprecated
     * Take picture
     * @param mass_storage_id Mass storage id to take picture
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPicture (byte _mass_storage_id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPicture (jniFeature, _mass_storage_id);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordPictureV2</code>
     * Take picture
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPictureV2 ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPictureV2 (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMaxAltitude</code>
     * Set Max Altitude
     * @param current Current altitude max in m
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxAltitude (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxAltitude (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMaxTilt</code>
     * Set Max Tilt
     * @param current Current tilt max in degree
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxTilt (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxTilt (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsPlaneModePitch</code>
     * Set plane mode pitch (only available for wing x)
     * @param current Current plane mode pitch in degree
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsPlaneModePitch (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsPlaneModePitch (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxVerticalSpeed</code>
     * Set Max Vertical speed
     * @param current Current max vertical speed in m/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxVerticalSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxVerticalSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxRotationSpeed</code>
     * Set Max Rotation speed
     * @param current Current max rotation speed in degree/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxRotationSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxRotationSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsWheels</code>
     * Presence of wheels
     * @param present 1 if present, 0 if not present
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsWheels (byte _present)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsWheels (jniFeature, _present);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxHorizontalSpeed</code>
     * Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)
     * @param current Current max Horizontal speed in m/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxHorizontalSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxHorizontalSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxPlaneModeRotationSpeed</code>
     * Set max plane mode rotation speed (only available for wing x)
     * @param current Current max plane mode rotation speed in degree/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxPlaneModeRotationSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxPlaneModeRotationSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsCutOutMode</code>
     * Set MiniDrone cut out mode
     * @param enable Enable cut out mode (1 if is activate, 0 otherwise)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsCutOutMode (byte _enable)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsCutOutMode (jniFeature, _enable);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSControllerLatitudeForRun</code>
     * Set the controller latitude for a run.
     * @param latitude Controller latitude in decimal degrees
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSControllerLatitudeForRun (double _latitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSControllerLatitudeForRun (jniFeature, _latitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSControllerLongitudeForRun</code>
     * Set the controller longitude for a run.
     * @param longitude Controller longitude in decimal degrees
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSControllerLongitudeForRun (double _longitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSControllerLongitudeForRun (jniFeature, _longitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ConfigurationControllerType</code>
     * Set the controller type.
     * @param type Controller type like iOS or Android
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendConfigurationControllerType (String _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendConfigurationControllerType (jniFeature, _type);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ConfigurationControllerName</code>
     * Set the controller name.
     * @param name Controller name like com.parrot.freeflight3
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendConfigurationControllerName (String _name)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendConfigurationControllerName (jniFeature, _name);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UsbAccessoryLightControl</code>
     * USB Light control cmd.
     * @param id Usb accessory id
     * @param mode Usb Light mode.
     * @param intensity Light intensity from 0 (OFF) to 100 (Max intensity). Only used in FIXED mode.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUsbAccessoryLightControl (byte _id, ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_ENUM _mode, byte _intensity)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUsbAccessoryLightControl (jniFeature, _id, _mode.getValue(), _intensity);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UsbAccessoryClawControl</code>
     * USB Claw control cmd.
     * @param id Usb accessory id.
     * @param action USB Claw action.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUsbAccessoryClawControl (byte _id, ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_ENUM _action)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUsbAccessoryClawControl (jniFeature, _id, _action.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UsbAccessoryGunControl</code>
     * USB Gun control cmd.
     * @param id Usb accessory id
     * @param action USB Gun action.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUsbAccessoryGunControl (byte _id, ARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION_ENUM _action)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUsbAccessoryGunControl (jniFeature, _id, _action.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

