/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureMiniDrone.java
 * @brief Feature controller allow to send command related of MiniDrone Feature.
 * All MiniDrone-only commands
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureMiniDrone
{
    private static String TAG = "ARFeatureMiniDrone";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAutoTakeOffModeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = ""; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT = ""; /**< Key of the argument </code>present</code> of event <code>SpeedSettingsStateWheelsChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxHorizontalSpeedChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR = ""; /**< Key of the argument </code>motor</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductMotorsVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductInertialVersionChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE = ""; /**< Key of the argument </code>enable</code> of event <code>SettingsStateCutOutModeChanged</code> in feature <code>MiniDrone</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY = ""; /**< Key of the argument </code>delay</code> of event <code>FloodControlStateFloodControlChanged</code> in feature <code>MiniDrone</code> */

    private static native String nativeStaticGetKeyMiniDronePilotingStateFlyingStateChangedState ();
    private static native String nativeStaticGetKeyMiniDronePilotingStateAlertStateChangedState ();
    private static native String nativeStaticGetKeyMiniDronePilotingStateAutoTakeOffModeChangedState ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedState ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedMassstorageid ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2State ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2Error ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedEvent ();
    private static native String nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedError ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMin ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMax ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMin ();
    private static native String nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateWheelsChangedPresent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMin ();
    private static native String nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMax ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedMotor ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedType ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedSoftware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedHardware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedSoftware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedHardware ();
    private static native String nativeStaticGetKeyMiniDroneSettingsStateCutOutModeChangedEnable ();
    private static native String nativeStaticGetKeyMiniDroneFloodControlStateFloodControlChangedDelay ();

    private native int nativeSendPilotingFlatTrim (long jFeature);
    private native int nativeSendPilotingTakeOff (long jFeature);
    private native int nativeSendPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestamp);
    private native int nativeSetPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestamp);
    private native int nativeSetPilotingPCMDFlag (long jFeature, byte flag);
    private native int nativeSetPilotingPCMDRoll (long jFeature, byte roll);
    private native int nativeSetPilotingPCMDPitch (long jFeature, byte pitch);
    private native int nativeSetPilotingPCMDYaw (long jFeature, byte yaw);
    private native int nativeSetPilotingPCMDGaz (long jFeature, byte gaz);
    private native int nativeSetPilotingPCMDTimestamp (long jFeature, int timestamp);
    private native int nativeSendPilotingLanding (long jFeature);
    private native int nativeSendPilotingEmergency (long jFeature);
    private native int nativeSendPilotingAutoTakeOffMode (long jFeature, byte state);
    private native int nativeSendAnimationsFlip (long jFeature, int direction);
    private native int nativeSendAnimationsCap (long jFeature, short offset);
    private native int nativeSendMediaRecordPicture (long jFeature, byte mass_storage_id);
    private native int nativeSendMediaRecordPictureV2 (long jFeature);
    private native int nativeSendPilotingSettingsMaxAltitude (long jFeature, float current);
    private native int nativeSendPilotingSettingsMaxTilt (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxVerticalSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxRotationSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsWheels (long jFeature, byte present);
    private native int nativeSendSpeedSettingsMaxHorizontalSpeed (long jFeature, float current);
    private native int nativeSendSettingsCutOutMode (long jFeature, byte enable);
    private native int nativeSendGPSControllerLatitudeForRun (long jFeature, double latitude);
    private native int nativeSendGPSControllerLongitudeForRun (long jFeature, double longitude);
    private native int nativeSendConfigurationControllerType (long jFeature, String type);
    private native int nativeSendConfigurationControllerName (long jFeature, String name);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateFlyingStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateAlertStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = nativeStaticGetKeyMiniDronePilotingStateAutoTakeOffModeChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2State ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = nativeStaticGetKeyMiniDroneMediaRecordStatePictureStateChangedV2Error ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedEvent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = nativeStaticGetKeyMiniDroneMediaRecordEventPictureEventChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxAltitudeChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = nativeStaticGetKeyMiniDronePilotingSettingsStateMaxTiltChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxVerticalSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxRotationSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_WHEELSCHANGED_PRESENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateWheelsChangedPresent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_CURRENT = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MIN = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SPEEDSETTINGSSTATE_MAXHORIZONTALSPEEDCHANGED_MAX = nativeStaticGetKeyMiniDroneSpeedSettingsStateMaxHorizontalSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_MOTOR = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedMotor ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_TYPE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTMOTORSVERSIONCHANGED_HARDWARE = nativeStaticGetKeyMiniDroneSettingsStateProductMotorsVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_PRODUCTINERTIALVERSIONCHANGED_HARDWARE = nativeStaticGetKeyMiniDroneSettingsStateProductInertialVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_SETTINGSSTATE_CUTOUTMODECHANGED_ENABLE = nativeStaticGetKeyMiniDroneSettingsStateCutOutModeChangedEnable ();
        ARCONTROLLER_DICTIONARY_KEY_MINIDRONE_FLOODCONTROLSTATE_FLOODCONTROLCHANGED_DELAY = nativeStaticGetKeyMiniDroneFloodControlStateFloodControlChangedDelay ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureMiniDrone (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingFlatTrim ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingFlatTrim (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingTakeOff ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingTakeOff (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDFlag (byte _flag)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDFlag (jniFeature, _flag);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDRoll (byte _roll)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDRoll (jniFeature, _roll);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDPitch (byte _pitch)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDPitch (jniFeature, _pitch);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDYaw (byte _yaw)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDYaw (jniFeature, _yaw);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDGaz (byte _gaz)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDGaz (jniFeature, _gaz);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDTimestamp (int _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDTimestamp (jniFeature, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingLanding ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingLanding (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingEmergency ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingEmergency (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingAutoTakeOffMode (byte _state)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingAutoTakeOffMode (jniFeature, _state);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendAnimationsFlip (ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_ENUM _direction)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsFlip (jniFeature, _direction.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendAnimationsCap (short _offset)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsCap (jniFeature, _offset);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPicture (byte _mass_storage_id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPicture (jniFeature, _mass_storage_id);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPictureV2 ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPictureV2 (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxAltitude (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxAltitude (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxTilt (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxTilt (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxVerticalSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxVerticalSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxRotationSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxRotationSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsWheels (byte _present)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsWheels (jniFeature, _present);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxHorizontalSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxHorizontalSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendSettingsCutOutMode (byte _enable)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsCutOutMode (jniFeature, _enable);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendGPSControllerLatitudeForRun (double _latitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSControllerLatitudeForRun (jniFeature, _latitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendGPSControllerLongitudeForRun (double _longitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSControllerLongitudeForRun (jniFeature, _longitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendConfigurationControllerType (String _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendConfigurationControllerType (jniFeature, _type);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendConfigurationControllerName (String _name)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendConfigurationControllerName (jniFeature, _name);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

