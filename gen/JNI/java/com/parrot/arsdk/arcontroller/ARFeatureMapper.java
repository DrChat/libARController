/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureMapper.java
 * @brief Feature controller allow to send command related of mapper Feature.
 * Key mapper for remote controllers
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureMapper
{
    private static String TAG = "ARFeatureMapper";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS = ""; /**< Key of the argument </code>buttons</code> of event <code>GrabState</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_AXES = ""; /**< Key of the argument </code>axes</code> of event <code>GrabState</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS_STATE = ""; /**< Key of the argument </code>buttons_state</code> of event <code>GrabState</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_BUTTON = ""; /**< Key of the argument </code>button</code> of event <code>GrabButtonEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_EVENT = ""; /**< Key of the argument </code>event</code> of event <code>GrabButtonEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_AXIS = ""; /**< Key of the argument </code>axis</code> of event <code>GrabAxisEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>GrabAxisEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_UID = ""; /**< Key of the argument </code>uid</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_PRODUCT = ""; /**< Key of the argument </code>product</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_ACTION = ""; /**< Key of the argument </code>action</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_BUTTONS = ""; /**< Key of the argument </code>buttons</code> of event <code>ButtonMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_UID = ""; /**< Key of the argument </code>uid</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_PRODUCT = ""; /**< Key of the argument </code>product</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_ACTION = ""; /**< Key of the argument </code>action</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_AXIS = ""; /**< Key of the argument </code>axis</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_BUTTONS = ""; /**< Key of the argument </code>buttons</code> of event <code>AxisMappingItem</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_ACTION = ""; /**< Key of the argument </code>action</code> of event <code>ApplicationAxisEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>ApplicationAxisEvent</code> in feature <code>Mapper</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONBUTTONEVENT_ACTION = ""; /**< Key of the argument </code>action</code> of event <code>ApplicationButtonEvent</code> in feature <code>Mapper</code> */

    private static native String nativeStaticGetKeyMapperGrabStateButtons ();
    private static native String nativeStaticGetKeyMapperGrabStateAxes ();
    private static native String nativeStaticGetKeyMapperGrabStateButtonsstate ();
    private static native String nativeStaticGetKeyMapperGrabButtonEventButton ();
    private static native String nativeStaticGetKeyMapperGrabButtonEventEvent ();
    private static native String nativeStaticGetKeyMapperGrabAxisEventAxis ();
    private static native String nativeStaticGetKeyMapperGrabAxisEventValue ();
    private static native String nativeStaticGetKeyMapperButtonMappingItemUid ();
    private static native String nativeStaticGetKeyMapperButtonMappingItemProduct ();
    private static native String nativeStaticGetKeyMapperButtonMappingItemAction ();
    private static native String nativeStaticGetKeyMapperButtonMappingItemButtons ();
    private static native String nativeStaticGetKeyMapperButtonMappingItemListflags ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemUid ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemProduct ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemAction ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemAxis ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemButtons ();
    private static native String nativeStaticGetKeyMapperAxisMappingItemListflags ();
    private static native String nativeStaticGetKeyMapperApplicationAxisEventAction ();
    private static native String nativeStaticGetKeyMapperApplicationAxisEventValue ();
    private static native String nativeStaticGetKeyMapperApplicationButtonEventAction ();

    private native int nativeSendGrab (long jFeature, int buttons, int axes);
    private native int nativeSendMapButtonAction (long jFeature, short product, int action, int buttons);
    private native int nativeSendMapAxisAction (long jFeature, short product, int action, int axis, int buttons);
    private native int nativeSendResetMapping (long jFeature, short product);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS = nativeStaticGetKeyMapperGrabStateButtons ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_AXES = nativeStaticGetKeyMapperGrabStateAxes ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABSTATE_BUTTONS_STATE = nativeStaticGetKeyMapperGrabStateButtonsstate ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_BUTTON = nativeStaticGetKeyMapperGrabButtonEventButton ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABBUTTONEVENT_EVENT = nativeStaticGetKeyMapperGrabButtonEventEvent ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_AXIS = nativeStaticGetKeyMapperGrabAxisEventAxis ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_GRABAXISEVENT_VALUE = nativeStaticGetKeyMapperGrabAxisEventValue ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_UID = nativeStaticGetKeyMapperButtonMappingItemUid ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_PRODUCT = nativeStaticGetKeyMapperButtonMappingItemProduct ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_ACTION = nativeStaticGetKeyMapperButtonMappingItemAction ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_BUTTONMAPPINGITEM_BUTTONS = nativeStaticGetKeyMapperButtonMappingItemButtons ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_UID = nativeStaticGetKeyMapperAxisMappingItemUid ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_PRODUCT = nativeStaticGetKeyMapperAxisMappingItemProduct ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_ACTION = nativeStaticGetKeyMapperAxisMappingItemAction ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_AXIS = nativeStaticGetKeyMapperAxisMappingItemAxis ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_AXISMAPPINGITEM_BUTTONS = nativeStaticGetKeyMapperAxisMappingItemButtons ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_ACTION = nativeStaticGetKeyMapperApplicationAxisEventAction ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONAXISEVENT_VALUE = nativeStaticGetKeyMapperApplicationAxisEventValue ();
        ARCONTROLLER_DICTIONARY_KEY_MAPPER_APPLICATIONBUTTONEVENT_ACTION = nativeStaticGetKeyMapperApplicationButtonEventAction ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureMapper (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>Grab</code>
     * Grabbed buttons are sent to the app and are not handled by the mapper
     * @param buttons Buttons to grab/ungrab (bitfield)
     * @param axes Axes to grab/ungrab (bitfield)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGrab (int _buttons, int _axes)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGrab (jniFeature, _buttons, _axes);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MapButtonAction</code>
     * TODO
     * @param product Product (see libARDiscovery for list)
     * @param action The action (mapped on a button)
     * @param buttons Buttons combination mapped to the action (bitfield). Set 0 (no button) to unmap an action
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMapButtonAction (short _product, ARCOMMANDS_MAPPER_BUTTON_ACTION_ENUM _action, int _buttons)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMapButtonAction (jniFeature, _product, _action.getValue(), _buttons);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MapAxisAction</code>
     * TODO
     * @param product Product (see libARDiscovery for list)
     * @param action The action (mapped on an axis)
     * @param axis The axis number on which the action will be mapped. Set a negative value to unmap the action.
     * @param buttons Buttons combination mapped to the action (bitfield). Can be zero if no buttons are required.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMapAxisAction (short _product, ARCOMMANDS_MAPPER_AXIS_ACTION_ENUM _action, int _axis, int _buttons)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMapAxisAction (jniFeature, _product, _action.getValue(), _axis, _buttons);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ResetMapping</code>
     * TODO
     * @param product The product to reset, or 0 to reset all products.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendResetMapping (short _product)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendResetMapping (jniFeature, _product);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

