/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeaturePro.java
 * @brief Feature controller allow to send command related of pro Feature.
 * Pro Feature
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeaturePro
{
    private static String TAG = "ARFeaturePro";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_SUPPORTEDFEATURES_STATUS = ""; /**< Key of the argument </code>status</code> of event <code>ProStateSupportedFeatures</code> in feature <code>Pro</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_SUPPORTEDFEATURES_FEATURES = ""; /**< Key of the argument </code>features</code> of event <code>ProStateSupportedFeatures</code> in feature <code>Pro</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_FEATURESACTIVATED_FEATURES = ""; /**< Key of the argument </code>features</code> of event <code>ProStateFeaturesActivated</code> in feature <code>Pro</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_PRO_PROEVENT_CHALLENGEEVENT_CHALLENGE = ""; /**< Key of the argument </code>challenge</code> of event <code>ProEventChallengeEvent</code> in feature <code>Pro</code> */

    private static native String nativeStaticGetKeyProProStateSupportedFeaturesStatus ();
    private static native String nativeStaticGetKeyProProStateSupportedFeaturesFeatures ();
    private static native String nativeStaticGetKeyProProStateFeaturesActivatedFeatures ();
    private static native String nativeStaticGetKeyProProEventChallengeEventChallenge ();

    private native int nativeSendProBoughtFeatures (long jFeature, long features);
    private native int nativeSendProResponse (long jFeature, byte listFlags, String signedChallenge);
    private native int nativeSendProActivateFeatures (long jFeature, long features);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_SUPPORTEDFEATURES_STATUS = nativeStaticGetKeyProProStateSupportedFeaturesStatus ();
        ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_SUPPORTEDFEATURES_FEATURES = nativeStaticGetKeyProProStateSupportedFeaturesFeatures ();
        ARCONTROLLER_DICTIONARY_KEY_PRO_PROSTATE_FEATURESACTIVATED_FEATURES = nativeStaticGetKeyProProStateFeaturesActivatedFeatures ();
        ARCONTROLLER_DICTIONARY_KEY_PRO_PROEVENT_CHALLENGEEVENT_CHALLENGE = nativeStaticGetKeyProProEventChallengeEventChallenge ();
    }
    
    /**
     * Constructor
     */
    public ARFeaturePro (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>ProBoughtFeatures</code>
     * Bought features on this pro version of the controller (features that have been bought)
     * This command starts the pro authentification process
     * @param features Bought features
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendProBoughtFeatures (long _features)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendProBoughtFeatures (jniFeature, _features);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ProResponse</code>
     * Response to the challenge string sent by the controller
     * @param listFlags List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last:  indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.
     * @param signedChallenge the signed challenge
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendProResponse (byte _listFlags, String _signedChallenge)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendProResponse (jniFeature, _listFlags, _signedChallenge);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ProActivateFeatures</code>
     * Activate some pro features
     * Pro features activated should be part of the list returned by ProState->FeaturesSupported
     * @param features Pro features to activate
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendProActivateFeatures (long _features)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendProActivateFeatures (jniFeature, _features);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

