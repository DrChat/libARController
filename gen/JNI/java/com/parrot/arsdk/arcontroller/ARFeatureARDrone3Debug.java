/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureARDrone3Debug.java
 * @brief Feature controller allow to send command related of ARDrone3Debug Feature.
 * All debug ARDrone3-only commands
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureARDrone3Debug
{
    private static String TAG = "ARFeatureARDrone3Debug";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_BATTERYDEBUGSETTINGSSTATE_USEDRONE2BATTERYCHANGED_DRONE2BATTERYUSED = ""; /**< Key of the argument </code>drone2BatteryUsed</code> of class <code>BatteryDebugSettingsState</code> in feature <code>ARDrone3Debug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_GPSDEBUGSTATE_NBSATELLITECHANGED_NBSATELLITE = ""; /**< Key of the argument </code>nbSatellite</code> of class <code>GPSDebugState</code> in feature <code>ARDrone3Debug</code> */

    private static native String nativeStaticGetKeyARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedDrone2BatteryUsed ();
    private static native String nativeStaticGetKeyARDrone3DebugGPSDebugStateNbSatelliteChangedNbSatellite ();

    private native int nativeSendVideoEnableWobbleCancellation (long jFeature, byte enable);
    private native int nativeSendVideoSyncAnglesGyros (long jFeature, float anglesDelay_s, float gyrosDelay_s);
    private native int nativeSendVideoManualWhiteBalance (long jFeature);
    private native int nativeSendBatteryDebugSettingsUseDrone2Battery (long jFeature, byte drone2BatteryUsed);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_BATTERYDEBUGSETTINGSSTATE_USEDRONE2BATTERYCHANGED_DRONE2BATTERYUSED = nativeStaticGetKeyARDrone3DebugBatteryDebugSettingsStateUseDrone2BatteryChangedDrone2BatteryUsed ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3DEBUG_GPSDEBUGSTATE_NBSATELLITECHANGED_NBSATELLITE = nativeStaticGetKeyARDrone3DebugGPSDebugStateNbSatelliteChangedNbSatellite ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureARDrone3Debug (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    public ARCONTROLLER_ERROR_ENUM sendVideoEnableWobbleCancellation (byte _enable)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendVideoEnableWobbleCancellation (jniFeature, _enable);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendVideoSyncAnglesGyros (float _anglesDelay_s, float _gyrosDelay_s)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendVideoSyncAnglesGyros (jniFeature, _anglesDelay_s, _gyrosDelay_s);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendVideoManualWhiteBalance ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendVideoManualWhiteBalance (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendBatteryDebugSettingsUseDrone2Battery (byte _drone2BatteryUsed)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendBatteryDebugSettingsUseDrone2Battery (jniFeature, _drone2BatteryUsed);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

