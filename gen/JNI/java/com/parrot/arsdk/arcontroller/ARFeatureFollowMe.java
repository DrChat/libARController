/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureFollowMe.java
 * @brief Feature controller allow to send command related of follow_me Feature.
 * FollowMe feature
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureFollowMe
{
    private static String TAG = "ARFeatureFollowMe";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_AVAILABILITY_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>Availability</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RUN_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>Run</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>distance_is_default</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_DISTANCE = ""; /**< Key of the argument </code>distance</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_ELEVATION_IS_DEFAULT = ""; /**< Key of the argument </code>elevation_is_default</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_ELEVATION = ""; /**< Key of the argument </code>elevation</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_AZIMUTH_IS_DEFAULT = ""; /**< Key of the argument </code>azimuth_is_default</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_AZIMUTH = ""; /**< Key of the argument </code>azimuth</code> of event <code>GeographicConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>distance_is_default</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_DISTANCE = ""; /**< Key of the argument </code>distance</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_ELEVATION_IS_DEFAULT = ""; /**< Key of the argument </code>elevation_is_default</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_ELEVATION = ""; /**< Key of the argument </code>elevation</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_AZIMUTH_IS_DEFAULT = ""; /**< Key of the argument </code>azimuth_is_default</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_AZIMUTH = ""; /**< Key of the argument </code>azimuth</code> of event <code>RelativeConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_ANIMRUN_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>AnimRun</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_SPEED_IS_DEFAULT = ""; /**< Key of the argument </code>speed_is_default</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_SPEED = ""; /**< Key of the argument </code>speed</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_REVOLUTION_NB_IS_DEFAULT = ""; /**< Key of the argument </code>revolution_nb_is_default</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_REVOLUTION_NB = ""; /**< Key of the argument </code>revolution_nb</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>vertical_distance_is_default</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_VERTICAL_DISTANCE = ""; /**< Key of the argument </code>vertical_distance</code> of event <code>SpiralAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_SPEED_IS_DEFAULT = ""; /**< Key of the argument </code>speed_is_default</code> of event <code>SwingAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_SPEED = ""; /**< Key of the argument </code>speed</code> of event <code>SwingAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>vertical_distance_is_default</code> of event <code>SwingAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_VERTICAL_DISTANCE = ""; /**< Key of the argument </code>vertical_distance</code> of event <code>SwingAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_SPEED_IS_DEFAULT = ""; /**< Key of the argument </code>speed_is_default</code> of event <code>BoomerangAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_SPEED = ""; /**< Key of the argument </code>speed</code> of event <code>BoomerangAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>distance_is_default</code> of event <code>BoomerangAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_DISTANCE = ""; /**< Key of the argument </code>distance</code> of event <code>BoomerangAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_SPEED_IS_DEFAULT = ""; /**< Key of the argument </code>speed_is_default</code> of event <code>CandleAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_SPEED = ""; /**< Key of the argument </code>speed</code> of event <code>CandleAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>vertical_distance_is_default</code> of event <code>CandleAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_VERTICAL_DISTANCE = ""; /**< Key of the argument </code>vertical_distance</code> of event <code>CandleAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_SPEED_IS_DEFAULT = ""; /**< Key of the argument </code>speed_is_default</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_SPEED = ""; /**< Key of the argument </code>speed</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_ANGLE_IS_DEFAULT = ""; /**< Key of the argument </code>angle_is_default</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_ANGLE = ""; /**< Key of the argument </code>angle</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_HORIZONTAL_DISTANCE_IS_DEFAULT = ""; /**< Key of the argument </code>horizontal_distance_is_default</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_HORIZONTAL_DISTANCE = ""; /**< Key of the argument </code>horizontal_distance</code> of event <code>DollySlideAnimConfigChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_USERFRAMINGPOSITIONCHANGED_HORIZONTAL = ""; /**< Key of the argument </code>horizontal</code> of event <code>UserFramingPositionChanged</code> in feature <code>FollowMe</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_USERFRAMINGPOSITIONCHANGED_VERTICAL = ""; /**< Key of the argument </code>vertical</code> of event <code>UserFramingPositionChanged</code> in feature <code>FollowMe</code> */

    private static native String nativeStaticGetKeyFollowMeAvailabilityType ();
    private static native String nativeStaticGetKeyFollowMeRunType ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedDistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedDistance ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedElevationisdefault ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedElevation ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedAzimuthisdefault ();
    private static native String nativeStaticGetKeyFollowMeGeographicConfigChangedAzimuth ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedDistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedDistance ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedElevationisdefault ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedElevation ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedAzimuthisdefault ();
    private static native String nativeStaticGetKeyFollowMeRelativeConfigChangedAzimuth ();
    private static native String nativeStaticGetKeyFollowMeAnimRunType ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedSpeedisdefault ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedSpeed ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedRevolutionnbisdefault ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedRevolutionnb ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedVerticaldistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeSpiralAnimConfigChangedVerticaldistance ();
    private static native String nativeStaticGetKeyFollowMeSwingAnimConfigChangedSpeedisdefault ();
    private static native String nativeStaticGetKeyFollowMeSwingAnimConfigChangedSpeed ();
    private static native String nativeStaticGetKeyFollowMeSwingAnimConfigChangedVerticaldistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeSwingAnimConfigChangedVerticaldistance ();
    private static native String nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedSpeedisdefault ();
    private static native String nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedSpeed ();
    private static native String nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedDistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedDistance ();
    private static native String nativeStaticGetKeyFollowMeCandleAnimConfigChangedSpeedisdefault ();
    private static native String nativeStaticGetKeyFollowMeCandleAnimConfigChangedSpeed ();
    private static native String nativeStaticGetKeyFollowMeCandleAnimConfigChangedVerticaldistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeCandleAnimConfigChangedVerticaldistance ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedSpeedisdefault ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedSpeed ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedAngleisdefault ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedAngle ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedHorizontaldistanceisdefault ();
    private static native String nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedHorizontaldistance ();
    private static native String nativeStaticGetKeyFollowMeUserFramingPositionChangedHorizontal ();
    private static native String nativeStaticGetKeyFollowMeUserFramingPositionChangedVertical ();

    private native int nativeSendGeographicRun (long jFeature, byte start, byte distance_is_default, float distance, byte elevation_is_default, float elevation, byte azimuth_is_default, float azimuth);
    private native int nativeSendRelativeRun (long jFeature, byte start, byte distance_is_default, float distance, byte elevation_is_default, float elevation, byte azimuth_is_default, float azimuth);
    private native int nativeSendLookAtRun (long jFeature, byte start);
    private native int nativeSendSpiralAnimRun (long jFeature, byte start, byte speed_is_default, float speed, byte revolution_nb_is_default, float revolution_number, byte vertical_distance_is_default, float vertical_distance);
    private native int nativeSendSwingAnimRun (long jFeature, byte start, byte speed_is_default, float speed, byte vertical_distance_is_default, float vertical_distance);
    private native int nativeSendBoomerangAnimRun (long jFeature, byte start, byte speed_is_default, float speed, byte distance_is_default, float distance);
    private native int nativeSendCandleAnimRun (long jFeature, byte start, byte speed_is_default, float speed, byte vertical_distance_is_default, float vertical_distance);
    private native int nativeSendDollySlideAnimRun (long jFeature, byte start, byte speed_is_default, float speed, byte angle_is_default, float angle, byte horizontal_distance_is_default, float horizontal_distance);
    private native int nativeSendUserFramingPosition (long jFeature, byte horizontal, byte vertical);
    private native int nativeSendUserGPSData (long jFeature, double latitude, double longitude, float altitude, float horizontal_accuracy, float vertical_accuracy, float north_speed, float east_speed, float down_speed, double timestamp);
    private native int nativeSendUserBaroData (long jFeature, float pressure, double timestamp);
    private native int nativeSendLynxDetection (long jFeature, float target_pan, float target_tilt, float change_of_scale, byte confidence_index, byte is_new_selection, long timestamp);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_AVAILABILITY_TYPE = nativeStaticGetKeyFollowMeAvailabilityType ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RUN_TYPE = nativeStaticGetKeyFollowMeRunType ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeGeographicConfigChangedDistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_DISTANCE = nativeStaticGetKeyFollowMeGeographicConfigChangedDistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_ELEVATION_IS_DEFAULT = nativeStaticGetKeyFollowMeGeographicConfigChangedElevationisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_ELEVATION = nativeStaticGetKeyFollowMeGeographicConfigChangedElevation ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_AZIMUTH_IS_DEFAULT = nativeStaticGetKeyFollowMeGeographicConfigChangedAzimuthisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_GEOGRAPHICCONFIGCHANGED_AZIMUTH = nativeStaticGetKeyFollowMeGeographicConfigChangedAzimuth ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeRelativeConfigChangedDistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_DISTANCE = nativeStaticGetKeyFollowMeRelativeConfigChangedDistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_ELEVATION_IS_DEFAULT = nativeStaticGetKeyFollowMeRelativeConfigChangedElevationisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_ELEVATION = nativeStaticGetKeyFollowMeRelativeConfigChangedElevation ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_AZIMUTH_IS_DEFAULT = nativeStaticGetKeyFollowMeRelativeConfigChangedAzimuthisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_RELATIVECONFIGCHANGED_AZIMUTH = nativeStaticGetKeyFollowMeRelativeConfigChangedAzimuth ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_ANIMRUN_TYPE = nativeStaticGetKeyFollowMeAnimRunType ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_SPEED_IS_DEFAULT = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedSpeedisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_SPEED = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedSpeed ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_REVOLUTION_NB_IS_DEFAULT = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedRevolutionnbisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_REVOLUTION_NB = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedRevolutionnb ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedVerticaldistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SPIRALANIMCONFIGCHANGED_VERTICAL_DISTANCE = nativeStaticGetKeyFollowMeSpiralAnimConfigChangedVerticaldistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_SPEED_IS_DEFAULT = nativeStaticGetKeyFollowMeSwingAnimConfigChangedSpeedisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_SPEED = nativeStaticGetKeyFollowMeSwingAnimConfigChangedSpeed ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeSwingAnimConfigChangedVerticaldistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_SWINGANIMCONFIGCHANGED_VERTICAL_DISTANCE = nativeStaticGetKeyFollowMeSwingAnimConfigChangedVerticaldistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_SPEED_IS_DEFAULT = nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedSpeedisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_SPEED = nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedSpeed ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedDistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_BOOMERANGANIMCONFIGCHANGED_DISTANCE = nativeStaticGetKeyFollowMeBoomerangAnimConfigChangedDistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_SPEED_IS_DEFAULT = nativeStaticGetKeyFollowMeCandleAnimConfigChangedSpeedisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_SPEED = nativeStaticGetKeyFollowMeCandleAnimConfigChangedSpeed ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_VERTICAL_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeCandleAnimConfigChangedVerticaldistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_CANDLEANIMCONFIGCHANGED_VERTICAL_DISTANCE = nativeStaticGetKeyFollowMeCandleAnimConfigChangedVerticaldistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_SPEED_IS_DEFAULT = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedSpeedisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_SPEED = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedSpeed ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_ANGLE_IS_DEFAULT = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedAngleisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_ANGLE = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedAngle ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_HORIZONTAL_DISTANCE_IS_DEFAULT = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedHorizontaldistanceisdefault ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_DOLLYSLIDEANIMCONFIGCHANGED_HORIZONTAL_DISTANCE = nativeStaticGetKeyFollowMeDollySlideAnimConfigChangedHorizontaldistance ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_USERFRAMINGPOSITIONCHANGED_HORIZONTAL = nativeStaticGetKeyFollowMeUserFramingPositionChangedHorizontal ();
        ARCONTROLLER_DICTIONARY_KEY_FOLLOW_ME_USERFRAMINGPOSITIONCHANGED_VERTICAL = nativeStaticGetKeyFollowMeUserFramingPositionChangedVertical ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureFollowMe (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>GeographicRun</code>
     * Begin or stop geographic type followMe (follow the leader keeping the same vector).
     * Sending this command will stop other running followMe.
     * @param start 1 to start geographic follow me process, 0 to stop it
     * @param distance_is_default 0 if distance is set by user, 1 if set by current distance (in this case distance value is not used) Not used when arg start is at 0
     * @param distance The distance leader-follower in meter Not used when arg start is at 0
     * @param elevation_is_default 0 if elevation is set by user, 1 if set by current elevation (in this case elevation value is not used) (not used when arg start is at 0)
     * @param elevation The elevation leader-follower in rad (not used when arg start is at 0)
     * @param azimuth_is_default 0 if azimuth is set by user, 1 if set by current azimuth (in this case azimuth value is not used) (not used when arg start is at 0)
     * @param azimuth The azimuth north-leader-follower in rad (not used when arg start is at 0)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGeographicRun (byte _start, byte _distance_is_default, float _distance, byte _elevation_is_default, float _elevation, byte _azimuth_is_default, float _azimuth)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGeographicRun (jniFeature, _start, _distance_is_default, _distance, _elevation_is_default, _elevation, _azimuth_is_default, _azimuth);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>RelativeRun</code>
     * Begin or stop relative type followMe (follow the leader keeping the same orientation to its direction).
     * Sending this command will stop other running followMe.
     * @param start 1 to start relative follow me process, 0 to stop it
     * @param distance_is_default 0 if distance is set by user, 1 if set by current distance (in this case distance value is not used) (not used when arg start is at 0)
     * @param distance The distance leader-follower in meter (not used when arg start is at 0)
     * @param elevation_is_default 0 if elevation is set by user, 1 if set by current elevation (in this case elevation value is not used) (not used when arg start is at 0)
     * @param elevation The elevation leader-follower in rad (not used when arg start is at 0)
     * @param azimuth_is_default 0 if azimuth is set by user, 1 if set by current azimuth (in this case azimuth value is not used) (not used when arg start is at 0)
     * @param azimuth The azimuth north-leader-follower in rad (not used when arg start is at 0)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendRelativeRun (byte _start, byte _distance_is_default, float _distance, byte _elevation_is_default, float _elevation, byte _azimuth_is_default, float _azimuth)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendRelativeRun (jniFeature, _start, _distance_is_default, _distance, _elevation_is_default, _elevation, _azimuth_is_default, _azimuth);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>LookAtRun</code>
     * Begin or stop look at type followMe (stare at the leader while hovering).
     * Sending this command will stop other running followMe.
     * @param start 1 to start look at process, 0 to stop it
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendLookAtRun (byte _start)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendLookAtRun (jniFeature, _start);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpiralAnimRun</code>
     * Begin or stop a spiral animation.
     * The spiral animation allows the drone to revolve around the target while going up, with a fixed radius.
     * @param start 1 to start the anim, 0 to stop it
     * @param speed_is_default 0 if speed is set by user, 1 if default speed should be used Not used when start is 0
     * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
     * @param revolution_nb_is_default 0 if the number of revolution is set by user, 1 if default revolution nb should be used Not used when start is 0
     * @param revolution_number The number of revolution (in turn) Negative value is infinite Example: 1.5 makes an entire turn plus half of a turn Not used when revolutionNb_is_default is 1 Not used when start is 0
     * @param vertical_distance_is_default 0 if the vertical distance is set by user, 1 if default value should be used Not used when start is 0
     * @param vertical_distance Distance that should be made by the product to reach the top of the spiral in m Not used when verticalDistance_is_default is 1 Not used when start is 0
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpiralAnimRun (byte _start, byte _speed_is_default, float _speed, byte _revolution_nb_is_default, float _revolution_number, byte _vertical_distance_is_default, float _vertical_distance)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpiralAnimRun (jniFeature, _start, _speed_is_default, _speed, _revolution_nb_is_default, _revolution_number, _vertical_distance_is_default, _vertical_distance);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SwingAnimRun</code>
     * Begin or stop a swing animation.
     * The swing animation enables a vertical point of view while the drone passes over the target.
     * @param start 1 to start the anim, 0 to stop it
     * @param speed_is_default 0 if speed is set by user, 1 if default speed should be used Not used when start is 0
     * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
     * @param vertical_distance_is_default 0 if the vertical distance is set by user, 1 if default value should be used Not used when start is 0
     * @param vertical_distance Distance that should be made by the product to reach the top of the swing in m Not used when verticalDistance_is_default is 1 Not used when start is 0
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSwingAnimRun (byte _start, byte _speed_is_default, float _speed, byte _vertical_distance_is_default, float _vertical_distance)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSwingAnimRun (jniFeature, _start, _speed_is_default, _speed, _vertical_distance_is_default, _vertical_distance);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>BoomerangAnimRun</code>
     * Begin or stop a boomerang animation.
     * The boomerang animation enables a zoom-out/zoom-in trajectory while preserving the framing chosen by the user.
     * @param start 1 to start the anim, 0 to stop it
     * @param speed_is_default 0 if speed is set by user, 1 if default speed should be used Not used when start is 0
     * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
     * @param distance_is_default 0 if the distance is set by user, 1 if default value should be used Not used when start is 0
     * @param distance Distance that should be made by the product to reach its return point in m Not used when distance_is_default is 1 Not used when start is 0
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendBoomerangAnimRun (byte _start, byte _speed_is_default, float _speed, byte _distance_is_default, float _distance)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendBoomerangAnimRun (jniFeature, _start, _speed_is_default, _speed, _distance_is_default, _distance);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CandleAnimRun</code>
     * Begin or stop a candle animation.
     * The candle animation enables a zoom-in directly on the target followed by a vertical zoom-out.
     * @param start 1 to start the anim, 0 to stop it
     * @param speed_is_default 0 if speed is set by user, 1 if default speed should be used Not used when start is 0
     * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
     * @param vertical_distance_is_default 0 if the vertical distance is set by user, 1 if default value should be used Not used when start is 0
     * @param vertical_distance Distance that should be made by the product to reach the top of the vertical zoom-out in m Not used when verticalDistance_is_default is 1 Not used when start is 0
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCandleAnimRun (byte _start, byte _speed_is_default, float _speed, byte _vertical_distance_is_default, float _vertical_distance)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCandleAnimRun (jniFeature, _start, _speed_is_default, _speed, _vertical_distance_is_default, _vertical_distance);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>DollySlideAnimRun</code>
     * Begin or stop a dolly slide animation.
     * Allows the drone to catch up to the target before flying past it, creating a zoom-in/zoom_out effect without a curved path.
     * @param start 1 to start the anim, 0 to stop it
     * @param speed_is_default 0 if speed is set by user, 1 if default speed should be used Not used when start is 0
     * @param speed The desired speed of the anim in m/s Not used when speed_is_default is 1 Not used when start is 0
     * @param angle_is_default 0 if the angle is set by user, 1 if default value should be used Not used when start is 0
     * @param angle Desired angle Product-User-Target in rad Not used when angle_is_default is 1 Not used when start is 0
     * @param horizontal_distance_is_default 0 if the horizontal distance is set by user, 1 if default value should be used Not used when start is 0
     * @param horizontal_distance Distance that should be made by the product to reach its target in m Not used when horizontalDistance_is_default is 1 Not used when start is 0
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendDollySlideAnimRun (byte _start, byte _speed_is_default, float _speed, byte _angle_is_default, float _angle, byte _horizontal_distance_is_default, float _horizontal_distance)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendDollySlideAnimRun (jniFeature, _start, _speed_is_default, _speed, _angle_is_default, _angle, _horizontal_distance_is_default, _horizontal_distance);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UserFramingPosition</code>
     * User desired framing in the video.
     * @param horizontal Horizontal position in the video (in %, from left to right)
     * @param vertical Vertical position in the video (in %, from bottom to top)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUserFramingPosition (byte _horizontal, byte _vertical)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUserFramingPosition (jniFeature, _horizontal, _vertical);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UserGPSData</code>
     * User gps data
     * @param latitude Latitude of the user (in deg)
     * @param longitude Longitude of the user (in deg)
     * @param altitude Altitude of the user (in meters, according to sea level)
     * @param horizontal_accuracy Horizontal accuracy (in meter)
     * @param vertical_accuracy Vertical accuracy (in meter)
     * @param north_speed North speed (in meter per second)
     * @param east_speed East speed (in meter per second)
     * @param down_speed Vertical speed (in meter per second) (down is positive)
     * @param timestamp Timestamp of the gps data
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUserGPSData (double _latitude, double _longitude, float _altitude, float _horizontal_accuracy, float _vertical_accuracy, float _north_speed, float _east_speed, float _down_speed, double _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUserGPSData (jniFeature, _latitude, _longitude, _altitude, _horizontal_accuracy, _vertical_accuracy, _north_speed, _east_speed, _down_speed, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>UserBaroData</code>
     * User barometer data
     * @param pressure Atmospheric pressure in hPa (millibar)
     * @param timestamp Timestamp of the barometer data
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendUserBaroData (float _pressure, double _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUserBaroData (jniFeature, _pressure, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>LynxDetection</code>
     * Send vision detection results.
     * @param target_pan Pan angle of detected target in radian
     * @param target_tilt Tilt angle of detected target in radian
     * @param change_of_scale Target's change of scale : new width = (1+ changOfScale) * old width
     * @param confidence_index Confidence index of the Lynx detection (from 0 to 255, the highest is the best)
     * @param is_new_selection Boolean. 1 if the selection is new, 0 otherwise
     * @param timestamp Acquisition time of processed picture in millisecond
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendLynxDetection (float _target_pan, float _target_tilt, float _change_of_scale, byte _confidence_index, byte _is_new_selection, long _timestamp)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendLynxDetection (jniFeature, _target_pan, _target_tilt, _change_of_scale, _confidence_index, _is_new_selection, _timestamp);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

