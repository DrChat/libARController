/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureJumpingSumoDebug.java
 * @brief Feature controller allow to send command related of JumpingSumoDebug Feature.
 * All debug commands specific to the Jumping Sumo.
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureJumpingSumoDebug
{
    private static String TAG = "ARFeatureJumpingSumoDebug";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_SUCCESS = ""; /**< Key of the argument </code>success</code> of class <code>UserScriptState</code> in feature <code>JumpingSumoDebug</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_MESSAGE = ""; /**< Key of the argument </code>message</code> of class <code>UserScriptState</code> in feature <code>JumpingSumoDebug</code> */

    private static native String nativeStaticGetKeyJumpingSumoDebugUserScriptStateUserScriptParsedSuccess ();
    private static native String nativeStaticGetKeyJumpingSumoDebugUserScriptStateUserScriptParsedMessage ();

    private native int nativeSendJumpSetJumpMotor (long jFeature, byte speed);
    private native int nativeSendJumpSetCameraOrientation (long jFeature, byte speedIncrement);
    private native int nativeSendAudioPlaySoundWithName (long jFeature, String filename);
    private native int nativeSendMiscDebugEvent (long jFeature);
    private native int nativeSendAnimationPlayAnimation (long jFeature, int id);
    private native int nativeSendAnimationAddCapOffset (long jFeature, float offset);
    private native int nativeSendUserScriptUserScriptUploaded (long jFeature);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_SUCCESS = nativeStaticGetKeyJumpingSumoDebugUserScriptStateUserScriptParsedSuccess ();
        ARCONTROLLER_DICTIONARY_KEY_JUMPINGSUMODEBUG_USERSCRIPTSTATE_USERSCRIPTPARSED_MESSAGE = nativeStaticGetKeyJumpingSumoDebugUserScriptStateUserScriptParsedMessage ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureJumpingSumoDebug (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    public ARCONTROLLER_ERROR_ENUM sendJumpSetJumpMotor (byte _speed)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendJumpSetJumpMotor (jniFeature, _speed);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendJumpSetCameraOrientation (byte _speedIncrement)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendJumpSetCameraOrientation (jniFeature, _speedIncrement);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendAudioPlaySoundWithName (String _filename)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAudioPlaySoundWithName (jniFeature, _filename);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendMiscDebugEvent ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMiscDebugEvent (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendAnimationPlayAnimation (ARCOMMANDS_JUMPINGSUMODEBUG_ANIMATION_PLAYANIMATION_ID_ENUM _id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationPlayAnimation (jniFeature, _id.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendAnimationAddCapOffset (float _offset)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationAddCapOffset (jniFeature, _offset);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM sendUserScriptUserScriptUploaded ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendUserScriptUserScriptUploaded (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

