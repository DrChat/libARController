/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureARDrone3.java
 * @brief Feature controller allow to send command related of ARDrone3 Feature.
 * All ARDrone3-only commands
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureARDrone3
{
    private static String TAG = "ARFeatureARDrone3";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStatePictureStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>MediaRecordStateVideoStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordStatePictureStateChangedV2</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordStateVideoStateChangedV2</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = ""; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventPictureEventChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT = ""; /**< Key of the argument </code>event</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MediaRecordEventVideoEventChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateFlyingStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAlertStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateNavigateHomeStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON = ""; /**< Key of the argument </code>reason</code> of event <code>PilotingStateNavigateHomeStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LATITUDE = ""; /**< Key of the argument </code>latitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LONGITUDE = ""; /**< Key of the argument </code>longitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_ALTITUDE = ""; /**< Key of the argument </code>altitude</code> of event <code>PilotingStatePositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDX = ""; /**< Key of the argument </code>speedX</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDY = ""; /**< Key of the argument </code>speedY</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDZ = ""; /**< Key of the argument </code>speedZ</code> of event <code>PilotingStateSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_ROLL = ""; /**< Key of the argument </code>roll</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_PITCH = ""; /**< Key of the argument </code>pitch</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_YAW = ""; /**< Key of the argument </code>yaw</code> of event <code>PilotingStateAttitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingStateAutoTakeOffModeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALTITUDECHANGED_ALTITUDE = ""; /**< Key of the argument </code>altitude</code> of event <code>PilotingStateAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DX = ""; /**< Key of the argument </code>dX</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DY = ""; /**< Key of the argument </code>dY</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DZ = ""; /**< Key of the argument </code>dZ</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DPSI = ""; /**< Key of the argument </code>dPsi</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>PilotingEventMoveByEnd</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_SSID = ""; /**< Key of the argument </code>ssid</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI = ""; /**< Key of the argument </code>rssi</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND = ""; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL = ""; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiScanListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND = ""; /**< Key of the argument </code>band</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL = ""; /**< Key of the argument </code>channel</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT = ""; /**< Key of the argument </code>in_or_out</code> of event <code>NetworkStateWifiAuthChannelListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxTiltChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_ABSOLUTCONTROLCHANGED_ON = ""; /**< Key of the argument </code>on</code> of event <code>PilotingSettingsStateAbsolutControlChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_NOFLYOVERMAXDISTANCECHANGED_SHOULDNOTFLYOVER = ""; /**< Key of the argument </code>shouldNotFlyOver</code> of event <code>PilotingSettingsStateNoFlyOverMaxDistanceChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALSPEED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxHorizontalSpeed</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALSPEED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxVerticalSpeed</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALACCELERATION_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxHorizontalAcceleration</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALACCELERATION_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxVerticalAcceleration</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXROTATIONSPEED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateAutonomousFlightMaxRotationSpeed</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_BANKEDTURNCHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>PilotingSettingsStateBankedTurnChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateMinAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateCirclingDirectionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateCirclingRadiusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PilotingSettingsStateCirclingAltitudeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStatePitchModeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_LANDINGMODECHANGED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PilotingSettingsStateLandingModeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxVerticalSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_HULLPROTECTIONCHANGED_PRESENT = ""; /**< Key of the argument </code>present</code> of event <code>SpeedSettingsStateHullProtectionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR = ""; /**< Key of the argument </code>outdoor</code> of event <code>SpeedSettingsStateOutdoorChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_CURRENT = ""; /**< Key of the argument </code>current</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>SpeedSettingsStateMaxPitchRollRotationSpeedChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND = ""; /**< Key of the argument </code>band</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL = ""; /**< Key of the argument </code>channel</code> of event <code>NetworkSettingsStateWifiSelectionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSecurityChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEY = ""; /**< Key of the argument </code>key</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE = ""; /**< Key of the argument </code>keyType</code> of event <code>NetworkSettingsStateWifiSecurity</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_MOTOR_NUMBER = ""; /**< Key of the argument </code>motor_number</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductMotorVersionListChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductGPSVersionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORIDS = ""; /**< Key of the argument </code>motorIds</code> of event <code>SettingsStateMotorErrorStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR = ""; /**< Key of the argument </code>motorError</code> of event <code>SettingsStateMotorErrorStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORSOFTWAREVERSIONCHANGED_VERSION = ""; /**< Key of the argument </code>version</code> of event <code>SettingsStateMotorSoftwareVersionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_NBFLIGHTS = ""; /**< Key of the argument </code>nbFlights</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_LASTFLIGHTDURATION = ""; /**< Key of the argument </code>lastFlightDuration</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_TOTALFLIGHTDURATION = ""; /**< Key of the argument </code>totalFlightDuration</code> of event <code>SettingsStateMotorFlightsStatusChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR = ""; /**< Key of the argument </code>motorError</code> of event <code>SettingsStateMotorErrorLastErrorChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_P7ID_SERIALID = ""; /**< Key of the argument </code>serialID</code> of event <code>SettingsStateP7ID</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>PictureSettingsStatePictureFormatChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>PictureSettingsStateAutoWhiteBalanceChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PictureSettingsStateExpositionChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_VALUE = ""; /**< Key of the argument </code>value</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MIN = ""; /**< Key of the argument </code>min</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MAX = ""; /**< Key of the argument </code>max</code> of event <code>PictureSettingsStateSaturationChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_ENABLED = ""; /**< Key of the argument </code>enabled</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_INTERVAL = ""; /**< Key of the argument </code>interval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MININTERVAL = ""; /**< Key of the argument </code>minInterval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MAXINTERVAL = ""; /**< Key of the argument </code>maxInterval</code> of event <code>PictureSettingsStateTimelapseChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_ENABLED = ""; /**< Key of the argument </code>enabled</code> of event <code>PictureSettingsStateVideoAutorecordChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>PictureSettingsStateVideoAutorecordChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE = ""; /**< Key of the argument </code>mode</code> of event <code>PictureSettingsStateVideoStabilizationModeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED = ""; /**< Key of the argument </code>enabled</code> of event <code>MediaStreamingStateVideoEnableChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LATITUDE = ""; /**< Key of the argument </code>latitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LONGITUDE = ""; /**< Key of the argument </code>longitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_ALTITUDE = ""; /**< Key of the argument </code>altitude</code> of event <code>GPSSettingsStateHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LATITUDE = ""; /**< Key of the argument </code>latitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LONGITUDE = ""; /**< Key of the argument </code>longitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_ALTITUDE = ""; /**< Key of the argument </code>altitude</code> of event <code>GPSSettingsStateResetHomeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSFIXSTATECHANGED_FIXED = ""; /**< Key of the argument </code>fixed</code> of event <code>GPSSettingsStateGPSFixStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>GPSSettingsStateGPSUpdateStateChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>GPSSettingsStateHomeTypeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RETURNHOMEDELAYCHANGED_DELAY = ""; /**< Key of the argument </code>delay</code> of event <code>GPSSettingsStateReturnHomeDelayChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_TILT = ""; /**< Key of the argument </code>tilt</code> of event <code>CameraStateOrientation</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_PAN = ""; /**< Key of the argument </code>pan</code> of event <code>CameraStateOrientation</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_TILT = ""; /**< Key of the argument </code>tilt</code> of event <code>CameraStateDefaultCameraOrientation</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_PAN = ""; /**< Key of the argument </code>pan</code> of event <code>CameraStateDefaultCameraOrientation</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY = ""; /**< Key of the argument </code>frequency</code> of event <code>AntiflickeringStateElectricFrequencyChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE = ""; /**< Key of the argument </code>mode</code> of event <code>AntiflickeringStateModeChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_NUMBEROFSATELLITECHANGED_NUMBEROFSATELLITE = ""; /**< Key of the argument </code>numberOfSatellite</code> of event <code>GPSStateNumberOfSatelliteChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>GPSStateHomeTypeAvailabilityChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_AVAILABLE = ""; /**< Key of the argument </code>available</code> of event <code>GPSStateHomeTypeAvailabilityChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>GPSStateHomeTypeChosenChanged</code> in feature <code>ARDrone3</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PROSTATE_FEATURES_FEATURES = ""; /**< Key of the argument </code>features</code> of event <code>PROStateFeatures</code> in feature <code>ARDrone3</code> */

    private static native String nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedMassstorageid ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedMassstorageid ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedV2State ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedV2Error ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedV2State ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedV2Error ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordEventPictureEventChangedEvent ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordEventPictureEventChangedError ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordEventVideoEventChangedEvent ();
    private static native String nativeStaticGetKeyARDrone3MediaRecordEventVideoEventChangedError ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateFlyingStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAlertStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateNavigateHomeStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateNavigateHomeStateChangedReason ();
    private static native String nativeStaticGetKeyARDrone3PilotingStatePositionChangedLatitude ();
    private static native String nativeStaticGetKeyARDrone3PilotingStatePositionChangedLongitude ();
    private static native String nativeStaticGetKeyARDrone3PilotingStatePositionChangedAltitude ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedX ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedY ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedZ ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedRoll ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedPitch ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedYaw ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAutoTakeOffModeChangedState ();
    private static native String nativeStaticGetKeyARDrone3PilotingStateAltitudeChangedAltitude ();
    private static native String nativeStaticGetKeyARDrone3PilotingEventMoveByEndDX ();
    private static native String nativeStaticGetKeyARDrone3PilotingEventMoveByEndDY ();
    private static native String nativeStaticGetKeyARDrone3PilotingEventMoveByEndDZ ();
    private static native String nativeStaticGetKeyARDrone3PilotingEventMoveByEndDPsi ();
    private static native String nativeStaticGetKeyARDrone3PilotingEventMoveByEndError ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedSsid ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedRssi ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedBand ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedChannel ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedBand ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedChannel ();
    private static native String nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedInorout ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAbsolutControlChangedOn ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateNoFlyOverMaxDistanceChangedShouldNotFlyOver ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalSpeedValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalSpeedValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalAccelerationValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalAccelerationValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxRotationSpeedValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateBankedTurnChangedState ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingDirectionChangedValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStatePitchModeChangedValue ();
    private static native String nativeStaticGetKeyARDrone3PilotingSettingsStateLandingModeChangedValue ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedMin ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedMax ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedMin ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedMax ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateHullProtectionChangedPresent ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateOutdoorChangedOutdoor ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedCurrent ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedMin ();
    private static native String nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedMax ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedType ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedBand ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedChannel ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityChangedType ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityType ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityKey ();
    private static native String nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityKeyType ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedMotornumber ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedType ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedSoftware ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedHardware ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductGPSVersionChangedSoftware ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateProductGPSVersionChangedHardware ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorErrorStateChangedMotorIds ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorErrorStateChangedMotorError ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorSoftwareVersionChangedVersion ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedNbFlights ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedLastFlightDuration ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedTotalFlightDuration ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateMotorErrorLastErrorChangedMotorError ();
    private static native String nativeStaticGetKeyARDrone3SettingsStateP7IDSerialID ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStatePictureFormatChangedType ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateAutoWhiteBalanceChangedType ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedValue ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedValue ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedMin ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedMax ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedEnabled ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedInterval ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedMinInterval ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedMaxInterval ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateVideoAutorecordChangedEnabled ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateVideoAutorecordChangedMassstorageid ();
    private static native String nativeStaticGetKeyARDrone3PictureSettingsStateVideoStabilizationModeChangedMode ();
    private static native String nativeStaticGetKeyARDrone3MediaStreamingStateVideoEnableChangedEnabled ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedLatitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedLongitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedAltitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedLatitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedLongitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedAltitude ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateGPSFixStateChangedFixed ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateGPSUpdateStateChangedState ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateHomeTypeChangedType ();
    private static native String nativeStaticGetKeyARDrone3GPSSettingsStateReturnHomeDelayChangedDelay ();
    private static native String nativeStaticGetKeyARDrone3CameraStateOrientationTilt ();
    private static native String nativeStaticGetKeyARDrone3CameraStateOrientationPan ();
    private static native String nativeStaticGetKeyARDrone3CameraStateDefaultCameraOrientationTilt ();
    private static native String nativeStaticGetKeyARDrone3CameraStateDefaultCameraOrientationPan ();
    private static native String nativeStaticGetKeyARDrone3AntiflickeringStateElectricFrequencyChangedFrequency ();
    private static native String nativeStaticGetKeyARDrone3AntiflickeringStateModeChangedMode ();
    private static native String nativeStaticGetKeyARDrone3GPSStateNumberOfSatelliteChangedNumberOfSatellite ();
    private static native String nativeStaticGetKeyARDrone3GPSStateHomeTypeAvailabilityChangedType ();
    private static native String nativeStaticGetKeyARDrone3GPSStateHomeTypeAvailabilityChangedAvailable ();
    private static native String nativeStaticGetKeyARDrone3GPSStateHomeTypeChosenChangedType ();
    private static native String nativeStaticGetKeyARDrone3PROStateFeaturesFeatures ();

    private native int nativeSendPilotingFlatTrim (long jFeature);
    private native int nativeSendPilotingTakeOff (long jFeature);
    private native int nativeSendPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestampAndSeqNum);
    private native int nativeSetPilotingPCMD (long jFeature, byte flag, byte roll, byte pitch, byte yaw, byte gaz, int timestampAndSeqNum);
    private native int nativeSetPilotingPCMDFlag (long jFeature, byte flag);
    private native int nativeSetPilotingPCMDRoll (long jFeature, byte roll);
    private native int nativeSetPilotingPCMDPitch (long jFeature, byte pitch);
    private native int nativeSetPilotingPCMDYaw (long jFeature, byte yaw);
    private native int nativeSetPilotingPCMDGaz (long jFeature, byte gaz);
    private native int nativeSetPilotingPCMDTimestampAndSeqNum (long jFeature, int timestampAndSeqNum);
    private native int nativeSendPilotingLanding (long jFeature);
    private native int nativeSendPilotingEmergency (long jFeature);
    private native int nativeSendPilotingNavigateHome (long jFeature, byte start);
    private native int nativeSendPilotingAutoTakeOffMode (long jFeature, byte state);
    private native int nativeSendPilotingMoveBy (long jFeature, float dX, float dY, float dZ, float dPsi);
    private native int nativeSendPilotingUserTakeOff (long jFeature, byte state);
    private native int nativeSendPilotingCircle (long jFeature, int direction);
    private native int nativeSendAnimationsFlip (long jFeature, int direction);
    private native int nativeSendCameraOrientation (long jFeature, byte tilt, byte pan);
    private native int nativeSendMediaRecordPicture (long jFeature, byte mass_storage_id);
    private native int nativeSendMediaRecordVideo (long jFeature, int record, byte mass_storage_id);
    private native int nativeSendMediaRecordPictureV2 (long jFeature);
    private native int nativeSendMediaRecordVideoV2 (long jFeature, int record);
    private native int nativeSendNetworkWifiScan (long jFeature, int band);
    private native int nativeSendNetworkWifiAuthChannel (long jFeature);
    private native int nativeSendPilotingSettingsMaxAltitude (long jFeature, float current);
    private native int nativeSendPilotingSettingsMaxTilt (long jFeature, float current);
    private native int nativeSendPilotingSettingsAbsolutControl (long jFeature, byte on);
    private native int nativeSendPilotingSettingsMaxDistance (long jFeature, float value);
    private native int nativeSendPilotingSettingsNoFlyOverMaxDistance (long jFeature, byte shouldNotFlyOver);
    private native int nativeSendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed (long jFeature, float value);
    private native int nativeSendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed (long jFeature, float value);
    private native int nativeSendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration (long jFeature, float value);
    private native int nativeSendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration (long jFeature, float value);
    private native int nativeSendPilotingSettingsSetAutonomousFlightMaxRotationSpeed (long jFeature, float value);
    private native int nativeSendPilotingSettingsBankedTurn (long jFeature, byte value);
    private native int nativeSendPilotingSettingsMinAltitude (long jFeature, float current);
    private native int nativeSendPilotingSettingsCirclingDirection (long jFeature, int value);
    private native int nativeSendPilotingSettingsCirclingRadius (long jFeature, short value);
    private native int nativeSendPilotingSettingsCirclingAltitude (long jFeature, short value);
    private native int nativeSendPilotingSettingsPitchMode (long jFeature, int value);
    private native int nativeSendPilotingSettingsLandingMode (long jFeature, int value);
    private native int nativeSendSpeedSettingsMaxVerticalSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsMaxRotationSpeed (long jFeature, float current);
    private native int nativeSendSpeedSettingsHullProtection (long jFeature, byte present);
    private native int nativeSendSpeedSettingsOutdoor (long jFeature, byte outdoor);
    private native int nativeSendSpeedSettingsMaxPitchRollRotationSpeed (long jFeature, float current);
    private native int nativeSendNetworkSettingsWifiSelection (long jFeature, int type, int band, byte channel);
    private native int nativeSendNetworkSettingsWifiSecurity (long jFeature, int type, String key, int keyType);
    private native int nativeSendPictureSettingsPictureFormatSelection (long jFeature, int type);
    private native int nativeSendPictureSettingsAutoWhiteBalanceSelection (long jFeature, int type);
    private native int nativeSendPictureSettingsExpositionSelection (long jFeature, float value);
    private native int nativeSendPictureSettingsSaturationSelection (long jFeature, float value);
    private native int nativeSendPictureSettingsTimelapseSelection (long jFeature, byte enabled, float interval);
    private native int nativeSendPictureSettingsVideoAutorecordSelection (long jFeature, byte enabled, byte mass_storage_id);
    private native int nativeSendPictureSettingsVideoStabilizationMode (long jFeature, int mode);
    private native int nativeSendMediaStreamingVideoEnable (long jFeature, byte enable);
    private native int nativeSendGPSSettingsSetHome (long jFeature, double latitude, double longitude, double altitude);
    private native int nativeSendGPSSettingsResetHome (long jFeature);
    private native int nativeSendGPSSettingsSendControllerGPS (long jFeature, double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy);
    private native int nativeSendGPSSettingsHomeType (long jFeature, int type);
    private native int nativeSendGPSSettingsReturnHomeDelay (long jFeature, short delay);
    private native int nativeSendAntiflickeringElectricFrequency (long jFeature, int frequency);
    private native int nativeSendAntiflickeringSetMode (long jFeature, int mode);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_STATE = nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGED_MASS_STORAGE_ID = nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE = nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_MASS_STORAGE_ID = nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE = nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedV2State ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR = nativeStaticGetKeyARDrone3MediaRecordStatePictureStateChangedV2Error ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE = nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedV2State ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR = nativeStaticGetKeyARDrone3MediaRecordStateVideoStateChangedV2Error ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT = nativeStaticGetKeyARDrone3MediaRecordEventPictureEventChangedEvent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR = nativeStaticGetKeyARDrone3MediaRecordEventPictureEventChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT = nativeStaticGetKeyARDrone3MediaRecordEventVideoEventChangedEvent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR = nativeStaticGetKeyARDrone3MediaRecordEventVideoEventChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE = nativeStaticGetKeyARDrone3PilotingStateFlyingStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE = nativeStaticGetKeyARDrone3PilotingStateAlertStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE = nativeStaticGetKeyARDrone3PilotingStateNavigateHomeStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON = nativeStaticGetKeyARDrone3PilotingStateNavigateHomeStateChangedReason ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LATITUDE = nativeStaticGetKeyARDrone3PilotingStatePositionChangedLatitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_LONGITUDE = nativeStaticGetKeyARDrone3PilotingStatePositionChangedLongitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_POSITIONCHANGED_ALTITUDE = nativeStaticGetKeyARDrone3PilotingStatePositionChangedAltitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDX = nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedX ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDY = nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedY ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_SPEEDCHANGED_SPEEDZ = nativeStaticGetKeyARDrone3PilotingStateSpeedChangedSpeedZ ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_ROLL = nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedRoll ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_PITCH = nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedPitch ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ATTITUDECHANGED_YAW = nativeStaticGetKeyARDrone3PilotingStateAttitudeChangedYaw ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_AUTOTAKEOFFMODECHANGED_STATE = nativeStaticGetKeyARDrone3PilotingStateAutoTakeOffModeChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSTATE_ALTITUDECHANGED_ALTITUDE = nativeStaticGetKeyARDrone3PilotingStateAltitudeChangedAltitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DX = nativeStaticGetKeyARDrone3PilotingEventMoveByEndDX ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DY = nativeStaticGetKeyARDrone3PilotingEventMoveByEndDY ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DZ = nativeStaticGetKeyARDrone3PilotingEventMoveByEndDZ ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_DPSI = nativeStaticGetKeyARDrone3PilotingEventMoveByEndDPsi ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR = nativeStaticGetKeyARDrone3PilotingEventMoveByEndError ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_SSID = nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedSsid ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_RSSI = nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedRssi ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND = nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedBand ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_CHANNEL = nativeStaticGetKeyARDrone3NetworkStateWifiScanListChangedChannel ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND = nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedBand ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_CHANNEL = nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedChannel ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_IN_OR_OUT = nativeStaticGetKeyARDrone3NetworkStateWifiAuthChannelListChangedInorout ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXALTITUDECHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxAltitudeChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXTILTCHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxTiltChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_ABSOLUTCONTROLCHANGED_ON = nativeStaticGetKeyARDrone3PilotingSettingsStateAbsolutControlChangedOn ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MAXDISTANCECHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateMaxDistanceChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_NOFLYOVERMAXDISTANCECHANGED_SHOULDNOTFLYOVER = nativeStaticGetKeyARDrone3PilotingSettingsStateNoFlyOverMaxDistanceChangedShouldNotFlyOver ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALSPEED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalSpeedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALSPEED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalSpeedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXHORIZONTALACCELERATION_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxHorizontalAccelerationValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXVERTICALACCELERATION_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxVerticalAccelerationValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_AUTONOMOUSFLIGHTMAXROTATIONSPEED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateAutonomousFlightMaxRotationSpeedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_BANKEDTURNCHANGED_STATE = nativeStaticGetKeyARDrone3PilotingSettingsStateBankedTurnChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_MINALTITUDECHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateMinAltitudeChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingDirectionChangedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGRADIUSCHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingRadiusChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_CURRENT = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MIN = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGALTITUDECHANGED_MAX = nativeStaticGetKeyARDrone3PilotingSettingsStateCirclingAltitudeChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStatePitchModeChangedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PILOTINGSETTINGSSTATE_LANDINGMODECHANGED_VALUE = nativeStaticGetKeyARDrone3PilotingSettingsStateLandingModeChangedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_CURRENT = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MIN = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXVERTICALSPEEDCHANGED_MAX = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxVerticalSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_CURRENT = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MIN = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXROTATIONSPEEDCHANGED_MAX = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxRotationSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_HULLPROTECTIONCHANGED_PRESENT = nativeStaticGetKeyARDrone3SpeedSettingsStateHullProtectionChangedPresent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_OUTDOORCHANGED_OUTDOOR = nativeStaticGetKeyARDrone3SpeedSettingsStateOutdoorChangedOutdoor ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_CURRENT = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedCurrent ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MIN = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SPEEDSETTINGSSTATE_MAXPITCHROLLROTATIONSPEEDCHANGED_MAX = nativeStaticGetKeyARDrone3SpeedSettingsStateMaxPitchRollRotationSpeedChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedBand ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_CHANNEL = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSelectionChangedChannel ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEY = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityKey ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE = nativeStaticGetKeyARDrone3NetworkSettingsStateWifiSecurityKeyType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_MOTOR_NUMBER = nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedMotornumber ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_TYPE = nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_SOFTWARE = nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTMOTORVERSIONLISTCHANGED_HARDWARE = nativeStaticGetKeyARDrone3SettingsStateProductMotorVersionListChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyARDrone3SettingsStateProductGPSVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_PRODUCTGPSVERSIONCHANGED_HARDWARE = nativeStaticGetKeyARDrone3SettingsStateProductGPSVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORIDS = nativeStaticGetKeyARDrone3SettingsStateMotorErrorStateChangedMotorIds ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR = nativeStaticGetKeyARDrone3SettingsStateMotorErrorStateChangedMotorError ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORSOFTWAREVERSIONCHANGED_VERSION = nativeStaticGetKeyARDrone3SettingsStateMotorSoftwareVersionChangedVersion ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_NBFLIGHTS = nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedNbFlights ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_LASTFLIGHTDURATION = nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedLastFlightDuration ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORFLIGHTSSTATUSCHANGED_TOTALFLIGHTDURATION = nativeStaticGetKeyARDrone3SettingsStateMotorFlightsStatusChangedTotalFlightDuration ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR = nativeStaticGetKeyARDrone3SettingsStateMotorErrorLastErrorChangedMotorError ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_SETTINGSSTATE_P7ID_SERIALID = nativeStaticGetKeyARDrone3SettingsStateP7IDSerialID ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE = nativeStaticGetKeyARDrone3PictureSettingsStatePictureFormatChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE = nativeStaticGetKeyARDrone3PictureSettingsStateAutoWhiteBalanceChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_VALUE = nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MIN = nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_EXPOSITIONCHANGED_MAX = nativeStaticGetKeyARDrone3PictureSettingsStateExpositionChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_VALUE = nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedValue ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MIN = nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedMin ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_SATURATIONCHANGED_MAX = nativeStaticGetKeyARDrone3PictureSettingsStateSaturationChangedMax ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_ENABLED = nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedEnabled ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_INTERVAL = nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedInterval ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MININTERVAL = nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedMinInterval ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_TIMELAPSECHANGED_MAXINTERVAL = nativeStaticGetKeyARDrone3PictureSettingsStateTimelapseChangedMaxInterval ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_ENABLED = nativeStaticGetKeyARDrone3PictureSettingsStateVideoAutorecordChangedEnabled ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOAUTORECORDCHANGED_MASS_STORAGE_ID = nativeStaticGetKeyARDrone3PictureSettingsStateVideoAutorecordChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE = nativeStaticGetKeyARDrone3PictureSettingsStateVideoStabilizationModeChangedMode ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED = nativeStaticGetKeyARDrone3MediaStreamingStateVideoEnableChangedEnabled ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LATITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedLatitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_LONGITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedLongitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMECHANGED_ALTITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateHomeChangedAltitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LATITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedLatitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_LONGITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedLongitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RESETHOMECHANGED_ALTITUDE = nativeStaticGetKeyARDrone3GPSSettingsStateResetHomeChangedAltitude ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSFIXSTATECHANGED_FIXED = nativeStaticGetKeyARDrone3GPSSettingsStateGPSFixStateChangedFixed ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE = nativeStaticGetKeyARDrone3GPSSettingsStateGPSUpdateStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE = nativeStaticGetKeyARDrone3GPSSettingsStateHomeTypeChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSETTINGSSTATE_RETURNHOMEDELAYCHANGED_DELAY = nativeStaticGetKeyARDrone3GPSSettingsStateReturnHomeDelayChangedDelay ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_TILT = nativeStaticGetKeyARDrone3CameraStateOrientationTilt ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_ORIENTATION_PAN = nativeStaticGetKeyARDrone3CameraStateOrientationPan ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_TILT = nativeStaticGetKeyARDrone3CameraStateDefaultCameraOrientationTilt ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_CAMERASTATE_DEFAULTCAMERAORIENTATION_PAN = nativeStaticGetKeyARDrone3CameraStateDefaultCameraOrientationPan ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY = nativeStaticGetKeyARDrone3AntiflickeringStateElectricFrequencyChangedFrequency ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE = nativeStaticGetKeyARDrone3AntiflickeringStateModeChangedMode ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_NUMBEROFSATELLITECHANGED_NUMBEROFSATELLITE = nativeStaticGetKeyARDrone3GPSStateNumberOfSatelliteChangedNumberOfSatellite ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE = nativeStaticGetKeyARDrone3GPSStateHomeTypeAvailabilityChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_AVAILABLE = nativeStaticGetKeyARDrone3GPSStateHomeTypeAvailabilityChangedAvailable ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE = nativeStaticGetKeyARDrone3GPSStateHomeTypeChosenChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_ARDRONE3_PROSTATE_FEATURES_FEATURES = nativeStaticGetKeyARDrone3PROStateFeaturesFeatures ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureARDrone3 (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>PilotingFlatTrim</code>
     * Do a flat trim
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingFlatTrim ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingFlatTrim (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingTakeOff</code>
     * Ask the drone to take off
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingTakeOff ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingTakeOff (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingPCMD</code>
     * Ask the drone to move around.
     * @param flag Boolean flag to activate roll/pitch movement
     * @param roll Roll consign for the drone [-100;100]
     * @param pitch Pitch consign for the drone [-100;100]
     * @param yaw Yaw consign for the drone [-100;100]
     * @param gaz Gaz consign for the drone [-100;100]
     * @param timestampAndSeqNum Command timestamp in milliseconds (low 24 bits) + command sequence number [0;255] (high 8 bits).
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestampAndSeqNum)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestampAndSeqNum);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMD (byte _flag, byte _roll, byte _pitch, byte _yaw, byte _gaz, int _timestampAndSeqNum)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMD (jniFeature, _flag, _roll, _pitch, _yaw, _gaz, _timestampAndSeqNum);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDFlag (byte _flag)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDFlag (jniFeature, _flag);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDRoll (byte _roll)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDRoll (jniFeature, _roll);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDPitch (byte _pitch)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDPitch (jniFeature, _pitch);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDYaw (byte _yaw)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDYaw (jniFeature, _yaw);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDGaz (byte _gaz)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDGaz (jniFeature, _gaz);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM setPilotingPCMDTimestampAndSeqNum (int _timestampAndSeqNum)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSetPilotingPCMDTimestampAndSeqNum (jniFeature, _timestampAndSeqNum);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingLanding</code>
     * Ask the drone to land
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingLanding ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingLanding (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingEmergency</code>
     * Put drone in emergency user state
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingEmergency ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingEmergency (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingNavigateHome</code>
     * Ask the drone to fly to home
     * @param start 1 to start the navigate home, 0 to stop it
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingNavigateHome (byte _start)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingNavigateHome (jniFeature, _start);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingAutoTakeOffMode</code>
     * @deprecated
     * [NOT USED] Set Drone3 in automatic take off mode
     * @param state State of automatic take off mode (1 for autotake off enabled)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingAutoTakeOffMode (byte _state)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingAutoTakeOffMode (jniFeature, _state);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingMoveBy</code>
     * [DRAFT] Move the drone to a relative position and rotate heading by a given angle
     * The frame is horizontal and relative to the current drone orientation:
     * - X is front
     * - Y is right
     * - Z is down
     * The movement settings of the device are those set for the autonomous flight.
     * @param dX Wanted displacement along the front axis [m]
     * @param dY Wanted displacement along the right axis [m]
     * @param dZ Wanted displacement along the down axis [m]
     * @param dPsi Wanted rotation of heading  [rad]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingMoveBy (float _dX, float _dY, float _dZ, float _dPsi)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingMoveBy (jniFeature, _dX, _dY, _dZ, _dPsi);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingUserTakeOff</code>
     * Set drone in user take off state
     * @param state State of user take off mode - 1 to enter in user take off. - 0 to exit from user take off.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingUserTakeOff (byte _state)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingUserTakeOff (jniFeature, _state);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingCircle</code>
     * Ask Fixed wings to circle
     * @param direction The circling direction
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingCircle (ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_ENUM _direction)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingCircle (jniFeature, _direction.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsFlip</code>
     * Make a flip
     * @param direction Direction for the flip
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsFlip (ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_ENUM _direction)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsFlip (jniFeature, _direction.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CameraOrientation</code>
     * Ask the drone to move camera.
     * @param tilt Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
     * @param pan Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCameraOrientation (byte _tilt, byte _pan)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCameraOrientation (jniFeature, _tilt, _pan);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordPicture</code>
     * @deprecated
     * Take picture
     * @param mass_storage_id Mass storage id to take picture
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPicture (byte _mass_storage_id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPicture (jniFeature, _mass_storage_id);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordVideo</code>
     * @deprecated
     * Video record
     * @param record Command to record video
     * @param mass_storage_id Mass storage id to record
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordVideo (ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_ENUM _record, byte _mass_storage_id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordVideo (jniFeature, _record.getValue(), _mass_storage_id);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordPictureV2</code>
     * Take picture
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordPictureV2 ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordPictureV2 (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaRecordVideoV2</code>
     * Video record
     * @param record Command to record video
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaRecordVideoV2 (ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_ENUM _record)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaRecordVideoV2 (jniFeature, _record.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>NetworkWifiScan</code>
     * Launches wifi network scan
     * @param band The band(s) : 2.4 Ghz, 5 Ghz, or both
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendNetworkWifiScan (ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ENUM _band)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendNetworkWifiScan (jniFeature, _band.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>NetworkWifiAuthChannel</code>
     * Controller inquire the list of authorized wifi channels.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendNetworkWifiAuthChannel ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendNetworkWifiAuthChannel (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMaxAltitude</code>
     * Set Max Altitude
     * @param current Current altitude max in m
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxAltitude (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxAltitude (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMaxTilt</code>
     * Set Max Tilt
     * @param current Current tilt max in degree
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxTilt (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxTilt (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsAbsolutControl</code>
     * @deprecated
     * Enable/Disable absolut control
     * @param on 1 to enable, 0 to disable
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsAbsolutControl (byte _on)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsAbsolutControl (jniFeature, _on);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMaxDistance</code>
     * Set the distance max of the drone
     * @param value Current max distance in meter
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMaxDistance (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMaxDistance (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsNoFlyOverMaxDistance</code>
     * Indication about how the product handle flying over the max distance limitation
     * @param shouldNotFlyOver 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsNoFlyOverMaxDistance (byte _shouldNotFlyOver)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsNoFlyOverMaxDistance (jniFeature, _shouldNotFlyOver);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalSpeed</code>
     * [NOT USED] Set the maximum horizontal speed used by the autonomous flight
     * @param value maximum horizontal speed [m/s]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsSetAutonomousFlightMaxHorizontalSpeed (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalSpeed</code>
     * [NOT USED] Set the maximum vertical speed used by the autonomous flight
     * @param value maximum vertical speed [m/s]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsSetAutonomousFlightMaxVerticalSpeed (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration</code>
     * [NOT USED] Set the maximum horizontal acceleration used by the autonomous flight
     * @param value maximum horizontal acceleration [m/s2]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsSetAutonomousFlightMaxHorizontalAcceleration (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsSetAutonomousFlightMaxVerticalAcceleration</code>
     * [NOT USED] Set the maximum vertical acceleration used by the autonomous flight
     * @param value maximum vertical acceleration [m/s2]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsSetAutonomousFlightMaxVerticalAcceleration (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsSetAutonomousFlightMaxRotationSpeed</code>
     * Set the maximum yaw rotation speed used by the autonomous flight
     * @param value maximum yaw rotation speed [deg/s]
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsSetAutonomousFlightMaxRotationSpeed (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsSetAutonomousFlightMaxRotationSpeed (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsBankedTurn</code>
     * Enable / Disable Banked Turn mode.
     * @param value 1 to enable, 0 to disable
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsBankedTurn (byte _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsBankedTurn (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsMinAltitude</code>
     * Set Min Altitude
     * @param current Current altitude min in m
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsMinAltitude (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsMinAltitude (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsCirclingDirection</code>
     * Set Fixed wings circling default direction
     * @param value The circling direction
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsCirclingDirection (ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_ENUM _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsCirclingDirection (jniFeature, _value.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsCirclingRadius</code>
     * Set Fixed wings circling radius
     * @param value The circling radius in meter
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsCirclingRadius (short _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsCirclingRadius (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsCirclingAltitude</code>
     * Set Fixed wings circling altitude
     * @param value The circling altitude in meter
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsCirclingAltitude (short _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsCirclingAltitude (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsPitchMode</code>
     * Set pitch mode
     * @param value The Pitch mode
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsPitchMode (ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_ENUM _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsPitchMode (jniFeature, _value.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PilotingSettingsLandingMode</code>
     * Set fixed wings Landing Mode
     * @param value The Landing mode
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPilotingSettingsLandingMode (ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_LANDINGMODE_VALUE_ENUM _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPilotingSettingsLandingMode (jniFeature, _value.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxVerticalSpeed</code>
     * Set Max Vertical speed
     * @param current Current max vertical speed in m/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxVerticalSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxVerticalSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxRotationSpeed</code>
     * Set Max Yaw Rotation speed
     * @param current Current max yaw rotation speed in degree/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxRotationSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxRotationSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsHullProtection</code>
     * Presence of hull protection
     * @param present 1 if present, 0 if not present
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsHullProtection (byte _present)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsHullProtection (jniFeature, _present);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsOutdoor</code>
     * @deprecated
     * Outdoor property
     * @param outdoor 1 if outdoor flight, 0 if indoor flight
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsOutdoor (byte _outdoor)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsOutdoor (jniFeature, _outdoor);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SpeedSettingsMaxPitchRollRotationSpeed</code>
     * Set Max Pitch/Rool Rotation speed
     * @param current Current max pitch/roll rotation speed in degree/s
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSpeedSettingsMaxPitchRollRotationSpeed (float _current)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSpeedSettingsMaxPitchRollRotationSpeed (jniFeature, _current);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>NetworkSettingsWifiSelection</code>
     * Auto-select channel of choosen band
     * @param type The type of wifi selection (auto, manual)
     * @param band The allowed band(s) : 2.4 Ghz, 5 Ghz, or all
     * @param channel The channel (not used in auto mode)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendNetworkSettingsWifiSelection (ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_ENUM _type, ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ENUM _band, byte _channel)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendNetworkSettingsWifiSelection (jniFeature, _type.getValue(), _band.getValue(), _channel);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>NetworkSettingsWifiSecurity</code>
     * Sent by the controller to set the wifi security
     * @param type The type of wifi security (open, wpa2)
     * @param key The key to secure the network (empty if type is open)
     * @param keyType Type of the key
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendNetworkSettingsWifiSecurity (ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_ENUM _type, String _key, ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE_ENUM _keyType)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendNetworkSettingsWifiSecurity (jniFeature, _type.getValue(), _key, _keyType.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsPictureFormatSelection</code>
     * The format of the photo
     * @param type The type of photo format
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsPictureFormatSelection (ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_ENUM _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsPictureFormatSelection (jniFeature, _type.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsAutoWhiteBalanceSelection</code>
     * AutoWhiteBalance mode
     * @param type The type auto white balance
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsAutoWhiteBalanceSelection (ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_ENUM _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsAutoWhiteBalanceSelection (jniFeature, _type.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsExpositionSelection</code>
     * The exposition of the image
     * @param value Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsExpositionSelection (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsExpositionSelection (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsSaturationSelection</code>
     * The saturation of the image
     * @param value Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsSaturationSelection (float _value)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsSaturationSelection (jniFeature, _value);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsTimelapseSelection</code>
     * Picture taken periodically
     * @param enabled 1 if timelapse is enabled, 0 otherwise
     * @param interval interval in seconds for taking pictures
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsTimelapseSelection (byte _enabled, float _interval)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsTimelapseSelection (jniFeature, _enabled, _interval);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsVideoAutorecordSelection</code>
     * Video autorecord
     * @param enabled 1 if video autorecord is enabled, 0 otherwise
     * @param mass_storage_id Mass storage id to take video
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsVideoAutorecordSelection (byte _enabled, byte _mass_storage_id)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsVideoAutorecordSelection (jniFeature, _enabled, _mass_storage_id);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>PictureSettingsVideoStabilizationMode</code>
     * Set Video stabilization mode
     * @param mode Video stabilization mode
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendPictureSettingsVideoStabilizationMode (ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_ENUM _mode)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendPictureSettingsVideoStabilizationMode (jniFeature, _mode.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MediaStreamingVideoEnable</code>
     * Enable/disable video streaming.
     * @param enable 1 to enable, 0 to disable.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMediaStreamingVideoEnable (byte _enable)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMediaStreamingVideoEnable (jniFeature, _enable);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSSettingsSetHome</code>
     * @deprecated
     * Set home location
     * @param latitude Home latitude in decimal degrees
     * @param longitude Home longitude in decimal degrees
     * @param altitude Home altitude in meters
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSSettingsSetHome (double _latitude, double _longitude, double _altitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSSettingsSetHome (jniFeature, _latitude, _longitude, _altitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSSettingsResetHome</code>
     * Reset home location and let the drone make its own home
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSSettingsResetHome ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSSettingsResetHome (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSSettingsSendControllerGPS</code>
     * send controller GPS location
     * @param latitude GPS latitude in decimal degrees
     * @param longitude GPS longitude in decimal degrees
     * @param altitude GPS altitude in meters
     * @param horizontalAccuracy Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy
     * @param verticalAccuracy Vertical Accuracy in meter ; equal -1 if no vertical Accuracy
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSSettingsSendControllerGPS (double _latitude, double _longitude, double _altitude, double _horizontalAccuracy, double _verticalAccuracy)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSSettingsSendControllerGPS (jniFeature, _latitude, _longitude, _altitude, _horizontalAccuracy, _verticalAccuracy);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSSettingsHomeType</code>
     * Set user preference for the type of the home position. Note that this is only a preference
     * @param type The type of the home position
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSSettingsHomeType (ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_ENUM _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSSettingsHomeType (jniFeature, _type.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSSettingsReturnHomeDelay</code>
     * Set the delay after which the drone will automatically try to return home
     * @param delay Delay in second
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSSettingsReturnHomeDelay (short _delay)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSSettingsReturnHomeDelay (jniFeature, _delay);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AntiflickeringElectricFrequency</code>
     * Electric frequency of the country determined by the position of the controller
     * @param frequency Type of the electric frequency
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAntiflickeringElectricFrequency (ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_ENUM _frequency)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAntiflickeringElectricFrequency (jniFeature, _frequency.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AntiflickeringSetMode</code>
     * Set the anti flickering mode
     * @param mode Mode of the anti flickering functionnality
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAntiflickeringSetMode (ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_ENUM _mode)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAntiflickeringSetMode (jniFeature, _mode.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

