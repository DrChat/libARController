/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
* @file ARDeviceController.java
* @brief Device controller allow to drive a device.
*/

package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import com.parrot.arsdk.arsal.ARNativeData;

import java.util.List;
import java.util.ArrayList;

public class ARDeviceController
{
    private static String TAG = "ARDeviceController";
    
    private static native void nativeStaticInit ();
    
    private native long nativeNew(long jdevice) throws ARControllerException;
    private native void nativeDelete(long jARDeviceController);
    
    private native int nativeStart (long jDeviceController);
    private native int nativeStop (long jDeviceController);
    
    private native long nativeGetFeatureSkyController (long jDeviceController);
    private native long nativeGetFeatureSkyControllerDebug (long jDeviceController);
    private native long nativeGetFeaturePro (long jDeviceController);
    private native long nativeGetFeatureMiniDrone (long jDeviceController);
    private native long nativeGetFeatureMiniDroneDebug (long jDeviceController);
    private native long nativeGetFeatureCommon (long jDeviceController);
    private native long nativeGetFeatureCommonDebug (long jDeviceController);
    private native long nativeGetFeatureARDrone3 (long jDeviceController);
    private native long nativeGetFeatureARDrone3Debug (long jDeviceController);
    private native long nativeGetFeatureJumpingSumo (long jDeviceController);
    private native long nativeGetFeatureJumpingSumoDebug (long jDeviceController);
    private native int nativeGetState (long jDeviceController) throws ARControllerException;
    private native long nativeGetCommandElements(long jDeviceController, int commandKey) throws ARControllerException;

    private long jniDeviceController;
    private boolean initOk;
    
    private List<ARDeviceControllerListener> listeners;
    private List<ARDeviceControllerStreamListener> streamlisteners;
    ARFeatureSkyController featureSkyController;
    ARFeatureSkyControllerDebug featureSkyControllerDebug;
    ARFeaturePro featurePro;
    ARFeatureMiniDrone featureMiniDrone;
    ARFeatureMiniDroneDebug featureMiniDroneDebug;
    ARFeatureCommon featureCommon;
    ARFeatureCommonDebug featureCommonDebug;
    ARFeatureARDrone3 featureARDrone3;
    ARFeatureARDrone3Debug featureARDrone3Debug;
    ARFeatureJumpingSumo featureJumpingSumo;
    ARFeatureJumpingSumoDebug featureJumpingSumoDebug;
    
    static
    {
        nativeStaticInit();
    }

    /**
     * Constructor
     */
    public ARDeviceController (ARDiscoveryDevice device) throws ARControllerException
    {
        initOk = false;
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        
        if (device != null)
        {
            jniDeviceController = nativeNew(device.getNativeDevice());
        }
        else
        {
            error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_BAD_PARAMETER;
        }
        
        if (jniDeviceController != 0)
        {
            listeners = new ArrayList<ARDeviceControllerListener>();
            streamlisteners = new ArrayList<ARDeviceControllerStreamListener>();
            initOk = true;
            
            long nativeFeatureSkyController = nativeGetFeatureSkyController (jniDeviceController);
            if (nativeFeatureSkyController != 0)
            {
                featureSkyController = new ARFeatureSkyController(nativeFeatureSkyController);
            }
            
            long nativeFeatureSkyControllerDebug = nativeGetFeatureSkyControllerDebug (jniDeviceController);
            if (nativeFeatureSkyControllerDebug != 0)
            {
                featureSkyControllerDebug = new ARFeatureSkyControllerDebug(nativeFeatureSkyControllerDebug);
            }
            
            long nativeFeaturePro = nativeGetFeaturePro (jniDeviceController);
            if (nativeFeaturePro != 0)
            {
                featurePro = new ARFeaturePro(nativeFeaturePro);
            }
            
            long nativeFeatureMiniDrone = nativeGetFeatureMiniDrone (jniDeviceController);
            if (nativeFeatureMiniDrone != 0)
            {
                featureMiniDrone = new ARFeatureMiniDrone(nativeFeatureMiniDrone);
            }
            
            long nativeFeatureMiniDroneDebug = nativeGetFeatureMiniDroneDebug (jniDeviceController);
            if (nativeFeatureMiniDroneDebug != 0)
            {
                featureMiniDroneDebug = new ARFeatureMiniDroneDebug(nativeFeatureMiniDroneDebug);
            }
            
            long nativeFeatureCommon = nativeGetFeatureCommon (jniDeviceController);
            if (nativeFeatureCommon != 0)
            {
                featureCommon = new ARFeatureCommon(nativeFeatureCommon);
            }
            
            long nativeFeatureCommonDebug = nativeGetFeatureCommonDebug (jniDeviceController);
            if (nativeFeatureCommonDebug != 0)
            {
                featureCommonDebug = new ARFeatureCommonDebug(nativeFeatureCommonDebug);
            }
            
            long nativeFeatureARDrone3 = nativeGetFeatureARDrone3 (jniDeviceController);
            if (nativeFeatureARDrone3 != 0)
            {
                featureARDrone3 = new ARFeatureARDrone3(nativeFeatureARDrone3);
            }
            
            long nativeFeatureARDrone3Debug = nativeGetFeatureARDrone3Debug (jniDeviceController);
            if (nativeFeatureARDrone3Debug != 0)
            {
                featureARDrone3Debug = new ARFeatureARDrone3Debug(nativeFeatureARDrone3Debug);
            }
            
            long nativeFeatureJumpingSumo = nativeGetFeatureJumpingSumo (jniDeviceController);
            if (nativeFeatureJumpingSumo != 0)
            {
                featureJumpingSumo = new ARFeatureJumpingSumo(nativeFeatureJumpingSumo);
            }
            
            long nativeFeatureJumpingSumoDebug = nativeGetFeatureJumpingSumoDebug (jniDeviceController);
            if (nativeFeatureJumpingSumoDebug != 0)
            {
                featureJumpingSumoDebug = new ARFeatureJumpingSumoDebug(nativeFeatureJumpingSumoDebug);
            }
            
        }

        if (error != ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK)
        {
            throw new ARControllerException (error);
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                nativeDelete(jniDeviceController);
                jniDeviceController = 0;
                initOk = false;
                
                if (featureSkyController != null)
                {
                    featureSkyController.dispose();
                    featureSkyController = null;
                }
                
                if (featureSkyControllerDebug != null)
                {
                    featureSkyControllerDebug.dispose();
                    featureSkyControllerDebug = null;
                }
                
                if (featurePro != null)
                {
                    featurePro.dispose();
                    featurePro = null;
                }
                
                if (featureMiniDrone != null)
                {
                    featureMiniDrone.dispose();
                    featureMiniDrone = null;
                }
                
                if (featureMiniDroneDebug != null)
                {
                    featureMiniDroneDebug.dispose();
                    featureMiniDroneDebug = null;
                }
                
                if (featureCommon != null)
                {
                    featureCommon.dispose();
                    featureCommon = null;
                }
                
                if (featureCommonDebug != null)
                {
                    featureCommonDebug.dispose();
                    featureCommonDebug = null;
                }
                
                if (featureARDrone3 != null)
                {
                    featureARDrone3.dispose();
                    featureARDrone3 = null;
                }
                
                if (featureARDrone3Debug != null)
                {
                    featureARDrone3Debug.dispose();
                    featureARDrone3Debug = null;
                }
                
                if (featureJumpingSumo != null)
                {
                    featureJumpingSumo.dispose();
                    featureJumpingSumo = null;
                }
                
                if (featureJumpingSumoDebug != null)
                {
                    featureJumpingSumoDebug.dispose();
                    featureJumpingSumoDebug = null;
                }
                
            }
            else
            {
                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    public ARCONTROLLER_ERROR_ENUM start ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeStart(jniDeviceController);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
            else
            {
                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;
            }
        }
        
        return error;
    }
    
    public ARCONTROLLER_ERROR_ENUM stop ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeStop(jniDeviceController);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
            else
            {
                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;
            }
        }
        
        return error;
    }
    
    public ARFeatureSkyController getFeatureSkyController ()
    {
        return featureSkyController;
    }
    
    public ARFeatureSkyControllerDebug getFeatureSkyControllerDebug ()
    {
        return featureSkyControllerDebug;
    }
    
    public ARFeaturePro getFeaturePro ()
    {
        return featurePro;
    }
    
    public ARFeatureMiniDrone getFeatureMiniDrone ()
    {
        return featureMiniDrone;
    }
    
    public ARFeatureMiniDroneDebug getFeatureMiniDroneDebug ()
    {
        return featureMiniDroneDebug;
    }
    
    public ARFeatureCommon getFeatureCommon ()
    {
        return featureCommon;
    }
    
    public ARFeatureCommonDebug getFeatureCommonDebug ()
    {
        return featureCommonDebug;
    }
    
    public ARFeatureARDrone3 getFeatureARDrone3 ()
    {
        return featureARDrone3;
    }
    
    public ARFeatureARDrone3Debug getFeatureARDrone3Debug ()
    {
        return featureARDrone3Debug;
    }
    
    public ARFeatureJumpingSumo getFeatureJumpingSumo ()
    {
        return featureJumpingSumo;
    }
    
    public ARFeatureJumpingSumoDebug getFeatureJumpingSumoDebug ()
    {
        return featureJumpingSumoDebug;
    }
    
    public ARControllerDictionary getCommandElements (ARCONTROLLER_DICTIONARY_KEY_ENUM commandKey) throws ARControllerException
    {
        ARControllerDictionary elementDictionary = null;
        
        synchronized (this)
        {
            if(initOk == true)
            {
                if(commandKey != null)
                {
                    long nativeElementDictionary = nativeGetCommandElements(jniDeviceController, commandKey.getValue());
                    
                    elementDictionary = new ARControllerDictionary(nativeElementDictionary);
                }
            }
        }
        
        return elementDictionary;
    }
    public ARCONTROLLER_DEVICE_STATE_ENUM getState () throws ARControllerException
    {
        ARCONTROLLER_DEVICE_STATE_ENUM state = ARCONTROLLER_DEVICE_STATE_ENUM.ARCONTROLLER_DEVICE_STATE_MAX;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeState = nativeGetState(jniDeviceController);
                state = ARCONTROLLER_DEVICE_STATE_ENUM.getFromValue(nativeState);
            }
            else
            {
                throw new ARControllerException(ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT);
            }
        }
        
        return state;
    }
    
    public synchronized void addListener (ARDeviceControllerListener listener)
    {
       if (! listeners.contains(listener))
       {
           listeners.add (listener);
       }
    }
    
    public synchronized void removeListener (ARDeviceControllerListener listener)
    {
        listeners.remove (listener);
    }
    
    public synchronized void addStreamListener (ARDeviceControllerStreamListener listener)
    {
       if (! streamlisteners.contains(listener))
       {
           streamlisteners.add (listener);
       }
    }

    public synchronized void removeStreamListener (ARDeviceControllerStreamListener listener)
    {
        streamlisteners.remove (listener);
    }
    
    private void onStateChanged (int newState, int error)
    {
        for (ARDeviceControllerListener l : listeners)
        {
            l.onStateChanged (this, ARCONTROLLER_DEVICE_STATE_ENUM.getFromValue(newState), ARCONTROLLER_ERROR_ENUM.getFromValue(error));
        }
    }
    
    private void onCommandReceived (int nativeCommandKey, long elementDictionary)
    {
        ARCONTROLLER_DICTIONARY_KEY_ENUM commandKey = ARCONTROLLER_DICTIONARY_KEY_ENUM.getFromValue(nativeCommandKey);
        
        ARControllerDictionary dictionary = new ARControllerDictionary(elementDictionary);
        
        for (ARDeviceControllerListener l : listeners)
        {
            l.onCommandReceived (this, ARCONTROLLER_DICTIONARY_KEY_ENUM.getFromValue(nativeCommandKey), dictionary);
        }
    }
    
    private void  didReceiveFrameCallback (long data, int dataCapacity, int dataSize, int nativeIsIFrame, int missed)
    {
        boolean isIFrame = (nativeIsIFrame != 0);
        
        ARFrame frame = new ARFrame (data, dataCapacity, dataSize, isIFrame, missed);
        
        for (ARDeviceControllerStreamListener l : streamlisteners)
        {
            l.onFrameReceived (this, frame);
        }
        
        frame.dispose();
    }

    private void  timeoutFrameCallback ()
    {
        for (ARDeviceControllerStreamListener l : streamlisteners)
        {
            l.onFrameTimeout (this);
        }
    }
}

