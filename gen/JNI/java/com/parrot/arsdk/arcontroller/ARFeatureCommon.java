/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllers.py script          *
 *                                                        *
 **********************************************************/

/**
 * @file ARFeatureCommon.java
 * @brief Feature controller allow to send command related of common Feature.
 * All common commands shared between all projects
 */
package com.parrot.arsdk.arcontroller;

import com.parrot.arsdk.arsal.ARSALPrint;
import com.parrot.arsdk.arcommands.*;
import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;

import java.util.List;
import java.util.ArrayList;

public class ARFeatureCommon
{
    private static String TAG = "ARFeatureCommon";
    
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE = ""; /**< Key of the argument </code>cause</code> of event <code>NetworkEventDisconnection</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTNAMECHANGED_NAME = ""; /**< Key of the argument </code>name</code> of event <code>SettingsStateProductNameChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_SOFTWARE = ""; /**< Key of the argument </code>software</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_HARDWARE = ""; /**< Key of the argument </code>hardware</code> of event <code>SettingsStateProductVersionChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALHIGHCHANGED_HIGH = ""; /**< Key of the argument </code>high</code> of event <code>SettingsStateProductSerialHighChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALLOWCHANGED_LOW = ""; /**< Key of the argument </code>low</code> of event <code>SettingsStateProductSerialLowChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_COUNTRYCHANGED_CODE = ""; /**< Key of the argument </code>code</code> of event <code>SettingsStateCountryChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_AUTOCOUNTRYCHANGED_AUTOMATIC = ""; /**< Key of the argument </code>automatic</code> of event <code>SettingsStateAutoCountryChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_BATTERYSTATECHANGED_PERCENT = ""; /**< Key of the argument </code>percent</code> of event <code>CommonStateBatteryStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_NAME = ""; /**< Key of the argument </code>name</code> of event <code>CommonStateMassStorageStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_SIZE = ""; /**< Key of the argument </code>size</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_USED_SIZE = ""; /**< Key of the argument </code>used_size</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_PLUGGED = ""; /**< Key of the argument </code>plugged</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_FULL = ""; /**< Key of the argument </code>full</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_INTERNAL = ""; /**< Key of the argument </code>internal</code> of event <code>CommonStateMassStorageInfoStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTDATECHANGED_DATE = ""; /**< Key of the argument </code>date</code> of event <code>CommonStateCurrentDateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTTIMECHANGED_TIME = ""; /**< Key of the argument </code>time</code> of event <code>CommonStateCurrentTimeChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_FREE_SPACE = ""; /**< Key of the argument </code>free_space</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_REC_TIME = ""; /**< Key of the argument </code>rec_time</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_PHOTO_REMAINING = ""; /**< Key of the argument </code>photo_remaining</code> of event <code>CommonStateMassStorageInfoRemainingListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_WIFISIGNALCHANGED_RSSI = ""; /**< Key of the argument </code>rssi</code> of event <code>CommonStateWifiSignalChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME = ""; /**< Key of the argument </code>sensorName</code> of event <code>CommonStateSensorsStatesListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORSTATE = ""; /**< Key of the argument </code>sensorState</code> of event <code>CommonStateSensorsStatesListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL = ""; /**< Key of the argument </code>model</code> of event <code>CommonStateProductModel</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_LISTFLAGS = ""; /**< Key of the argument </code>listFlags</code> of event <code>CommonStateCountryListKnown</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_COUNTRYCODES = ""; /**< Key of the argument </code>countryCodes</code> of event <code>CommonStateCountryListKnown</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_MASS_STORAGE_ID = ""; /**< Key of the argument </code>mass_storage_id</code> of event <code>CommonStateMassStorageContentChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBPHOTOS = ""; /**< Key of the argument </code>nbPhotos</code> of event <code>CommonStateMassStorageContentChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBVIDEOS = ""; /**< Key of the argument </code>nbVideos</code> of event <code>CommonStateMassStorageContentChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBPUDS = ""; /**< Key of the argument </code>nbPuds</code> of event <code>CommonStateMassStorageContentChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBCRASHLOGS = ""; /**< Key of the argument </code>nbCrashLogs</code> of event <code>CommonStateMassStorageContentChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_OVERHEATSTATE_OVERHEATREGULATIONCHANGED_REGULATIONTYPE = ""; /**< Key of the argument </code>regulationType</code> of event <code>OverHeatStateOverHeatRegulationChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_WIFISETTINGSSTATE_OUTDOORSETTINGSCHANGED_OUTDOOR = ""; /**< Key of the argument </code>outdoor</code> of event <code>WifiSettingsStateOutdoorSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE = ""; /**< Key of the argument </code>state</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_FILEPATH = ""; /**< Key of the argument </code>filepath</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE = ""; /**< Key of the argument </code>type</code> of event <code>MavlinkStateMavlinkFilePlayingStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>MavlinkStateMavlinkPlayErrorStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_XAXISCALIBRATION = ""; /**< Key of the argument </code>xAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_YAXISCALIBRATION = ""; /**< Key of the argument </code>yAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_ZAXISCALIBRATION = ""; /**< Key of the argument </code>zAxisCalibration</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_CALIBRATIONFAILED = ""; /**< Key of the argument </code>calibrationFailed</code> of event <code>CalibrationStateMagnetoCalibrationStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONREQUIREDSTATE_REQUIRED = ""; /**< Key of the argument </code>required</code> of event <code>CalibrationStateMagnetoCalibrationRequiredState</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS = ""; /**< Key of the argument </code>axis</code> of event <code>CalibrationStateMagnetoCalibrationAxisToCalibrateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTARTEDCHANGED_STARTED = ""; /**< Key of the argument </code>started</code> of event <code>CalibrationStateMagnetoCalibrationStartedChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_FOV = ""; /**< Key of the argument </code>fov</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMAX = ""; /**< Key of the argument </code>panMax</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMIN = ""; /**< Key of the argument </code>panMin</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMAX = ""; /**< Key of the argument </code>tiltMax</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMIN = ""; /**< Key of the argument </code>tiltMin</code> of event <code>CameraSettingsStateCameraSettingsChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_AVAILABILITYSTATECHANGED_AVAILABILITYSTATE = ""; /**< Key of the argument </code>AvailabilityState</code> of event <code>FlightPlanStateAvailabilityStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT = ""; /**< Key of the argument </code>component</code> of event <code>FlightPlanStateComponentStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_STATE = ""; /**< Key of the argument </code>State</code> of event <code>FlightPlanStateComponentStateListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_CONTROLLERLIBARCOMMANDSVERSION_VERSION = ""; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateControllerLibARCommandsVersion</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_SKYCONTROLLERLIBARCOMMANDSVERSION_VERSION = ""; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateSkyControllerLibARCommandsVersion</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_DEVICELIBARCOMMANDSVERSION_VERSION = ""; /**< Key of the argument </code>version</code> of event <code>ARLibsVersionsStateDeviceLibARCommandsVersion</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_AUDIOSTATE_AUDIOSTREAMINGRUNNING_RUNNING = ""; /**< Key of the argument </code>running</code> of event <code>AudioStateAudioStreamingRunning</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_LEFT = ""; /**< Key of the argument </code>left</code> of event <code>HeadlightsStateIntensityChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_RIGHT = ""; /**< Key of the argument </code>right</code> of event <code>HeadlightsStateIntensityChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ANIM = ""; /**< Key of the argument </code>anim</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_STATE = ""; /**< Key of the argument </code>state</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>AnimationsStateList</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY = ""; /**< Key of the argument </code>accessory</code> of event <code>AccessoryStateSupportedAccessoriesListChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY = ""; /**< Key of the argument </code>newAccessory</code> of event <code>AccessoryStateAccessoryConfigChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR = ""; /**< Key of the argument </code>error</code> of event <code>AccessoryStateAccessoryConfigChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGMODIFICATIONENABLED_ENABLED = ""; /**< Key of the argument </code>enabled</code> of event <code>AccessoryStateAccessoryConfigModificationEnabled</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE = ""; /**< Key of the argument </code>rate</code> of event <code>ChargerStateMaxChargeRateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS = ""; /**< Key of the argument </code>status</code> of event <code>ChargerStateCurrentChargeStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE = ""; /**< Key of the argument </code>phase</code> of event <code>ChargerStateCurrentChargeStateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE = ""; /**< Key of the argument </code>rate</code> of event <code>ChargerStateLastChargeRateChanged</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE = ""; /**< Key of the argument </code>phase</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_RATE = ""; /**< Key of the argument </code>rate</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_INTENSITY = ""; /**< Key of the argument </code>intensity</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_FULLCHARGINGTIME = ""; /**< Key of the argument </code>fullChargingTime</code> of event <code>ChargerStateChargingInfo</code> in feature <code>Common</code> */
    public static String ARCONTROLLER_DICTIONARY_KEY_COMMON_RUNSTATE_RUNIDCHANGED_RUNID = ""; /**< Key of the argument </code>runId</code> of event <code>RunStateRunIdChanged</code> in feature <code>Common</code> */

    private static native String nativeStaticGetKeyCommonNetworkEventDisconnectionCause ();
    private static native String nativeStaticGetKeyCommonSettingsStateProductNameChangedName ();
    private static native String nativeStaticGetKeyCommonSettingsStateProductVersionChangedSoftware ();
    private static native String nativeStaticGetKeyCommonSettingsStateProductVersionChangedHardware ();
    private static native String nativeStaticGetKeyCommonSettingsStateProductSerialHighChangedHigh ();
    private static native String nativeStaticGetKeyCommonSettingsStateProductSerialLowChangedLow ();
    private static native String nativeStaticGetKeyCommonSettingsStateCountryChangedCode ();
    private static native String nativeStaticGetKeyCommonSettingsStateAutoCountryChangedAutomatic ();
    private static native String nativeStaticGetKeyCommonCommonStateBatteryStateChangedPercent ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageStateListChangedMassstorageid ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageStateListChangedName ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedMassstorageid ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedSize ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedUsedsize ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedPlugged ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedFull ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedInternal ();
    private static native String nativeStaticGetKeyCommonCommonStateCurrentDateChangedDate ();
    private static native String nativeStaticGetKeyCommonCommonStateCurrentTimeChangedTime ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedFreespace ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedRectime ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedPhotoremaining ();
    private static native String nativeStaticGetKeyCommonCommonStateWifiSignalChangedRssi ();
    private static native String nativeStaticGetKeyCommonCommonStateSensorsStatesListChangedSensorName ();
    private static native String nativeStaticGetKeyCommonCommonStateSensorsStatesListChangedSensorState ();
    private static native String nativeStaticGetKeyCommonCommonStateProductModelModel ();
    private static native String nativeStaticGetKeyCommonCommonStateCountryListKnownListFlags ();
    private static native String nativeStaticGetKeyCommonCommonStateCountryListKnownCountryCodes ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageContentChangedMassstorageid ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbPhotos ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbVideos ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbPuds ();
    private static native String nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbCrashLogs ();
    private static native String nativeStaticGetKeyCommonOverHeatStateOverHeatRegulationChangedRegulationType ();
    private static native String nativeStaticGetKeyCommonWifiSettingsStateOutdoorSettingsChangedOutdoor ();
    private static native String nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedState ();
    private static native String nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedFilepath ();
    private static native String nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedType ();
    private static native String nativeStaticGetKeyCommonMavlinkStateMavlinkPlayErrorStateChangedError ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedXAxisCalibration ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedYAxisCalibration ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedZAxisCalibration ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedCalibrationFailed ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationRequiredStateRequired ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationAxisToCalibrateChangedAxis ();
    private static native String nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStartedChangedStarted ();
    private static native String nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedFov ();
    private static native String nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedPanMax ();
    private static native String nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedPanMin ();
    private static native String nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedTiltMax ();
    private static native String nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedTiltMin ();
    private static native String nativeStaticGetKeyCommonFlightPlanStateAvailabilityStateChangedAvailabilityState ();
    private static native String nativeStaticGetKeyCommonFlightPlanStateComponentStateListChangedComponent ();
    private static native String nativeStaticGetKeyCommonFlightPlanStateComponentStateListChangedState ();
    private static native String nativeStaticGetKeyCommonARLibsVersionsStateControllerLibARCommandsVersionVersion ();
    private static native String nativeStaticGetKeyCommonARLibsVersionsStateSkyControllerLibARCommandsVersionVersion ();
    private static native String nativeStaticGetKeyCommonARLibsVersionsStateDeviceLibARCommandsVersionVersion ();
    private static native String nativeStaticGetKeyCommonAudioStateAudioStreamingRunningRunning ();
    private static native String nativeStaticGetKeyCommonHeadlightsStateIntensityChangedLeft ();
    private static native String nativeStaticGetKeyCommonHeadlightsStateIntensityChangedRight ();
    private static native String nativeStaticGetKeyCommonAnimationsStateListAnim ();
    private static native String nativeStaticGetKeyCommonAnimationsStateListState ();
    private static native String nativeStaticGetKeyCommonAnimationsStateListError ();
    private static native String nativeStaticGetKeyCommonAccessoryStateSupportedAccessoriesListChangedAccessory ();
    private static native String nativeStaticGetKeyCommonAccessoryStateAccessoryConfigChangedNewAccessory ();
    private static native String nativeStaticGetKeyCommonAccessoryStateAccessoryConfigChangedError ();
    private static native String nativeStaticGetKeyCommonAccessoryStateAccessoryConfigModificationEnabledEnabled ();
    private static native String nativeStaticGetKeyCommonChargerStateMaxChargeRateChangedRate ();
    private static native String nativeStaticGetKeyCommonChargerStateCurrentChargeStateChangedStatus ();
    private static native String nativeStaticGetKeyCommonChargerStateCurrentChargeStateChangedPhase ();
    private static native String nativeStaticGetKeyCommonChargerStateLastChargeRateChangedRate ();
    private static native String nativeStaticGetKeyCommonChargerStateChargingInfoPhase ();
    private static native String nativeStaticGetKeyCommonChargerStateChargingInfoRate ();
    private static native String nativeStaticGetKeyCommonChargerStateChargingInfoIntensity ();
    private static native String nativeStaticGetKeyCommonChargerStateChargingInfoFullChargingTime ();
    private static native String nativeStaticGetKeyCommonRunStateRunIdChangedRunId ();

    private native int nativeSendNetworkDisconnect (long jFeature);
    private native int nativeSendSettingsAllSettings (long jFeature);
    private native int nativeSendSettingsReset (long jFeature);
    private native int nativeSendSettingsProductName (long jFeature, String name);
    private native int nativeSendSettingsCountry (long jFeature, String code);
    private native int nativeSendSettingsAutoCountry (long jFeature, byte automatic);
    private native int nativeSendCommonAllStates (long jFeature);
    private native int nativeSendCommonCurrentDate (long jFeature, String date);
    private native int nativeSendCommonCurrentTime (long jFeature, String time);
    private native int nativeSendCommonReboot (long jFeature);
    private native int nativeSendOverHeatSwitchOff (long jFeature);
    private native int nativeSendOverHeatVentilate (long jFeature);
    private native int nativeSendControllerIsPiloting (long jFeature, byte piloting);
    private native int nativeSendWifiSettingsOutdoorSetting (long jFeature, byte outdoor);
    private native int nativeSendMavlinkStart (long jFeature, String filepath, int type);
    private native int nativeSendMavlinkPause (long jFeature);
    private native int nativeSendMavlinkStop (long jFeature);
    private native int nativeSendCalibrationMagnetoCalibration (long jFeature, byte calibrate);
    private native int nativeSendGPSControllerPositionForRun (long jFeature, double latitude, double longitude);
    private native int nativeSendAudioControllerReadyForStreaming (long jFeature, byte ready);
    private native int nativeSendHeadlightsIntensity (long jFeature, byte left, byte right);
    private native int nativeSendAnimationsStartAnimation (long jFeature, int anim);
    private native int nativeSendAnimationsStopAnimation (long jFeature, int anim);
    private native int nativeSendAnimationsStopAllAnimations (long jFeature);
    private native int nativeSendAccessoryConfig (long jFeature, int accessory);
    private native int nativeSendChargerSetMaxChargeRate (long jFeature, int rate);

    private long jniFeature;
    private boolean initOk;
    
    static
    {
        ARCONTROLLER_DICTIONARY_KEY_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE = nativeStaticGetKeyCommonNetworkEventDisconnectionCause ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTNAMECHANGED_NAME = nativeStaticGetKeyCommonSettingsStateProductNameChangedName ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_SOFTWARE = nativeStaticGetKeyCommonSettingsStateProductVersionChangedSoftware ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTVERSIONCHANGED_HARDWARE = nativeStaticGetKeyCommonSettingsStateProductVersionChangedHardware ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALHIGHCHANGED_HIGH = nativeStaticGetKeyCommonSettingsStateProductSerialHighChangedHigh ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_PRODUCTSERIALLOWCHANGED_LOW = nativeStaticGetKeyCommonSettingsStateProductSerialLowChangedLow ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_COUNTRYCHANGED_CODE = nativeStaticGetKeyCommonSettingsStateCountryChangedCode ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_AUTOCOUNTRYCHANGED_AUTOMATIC = nativeStaticGetKeyCommonSettingsStateAutoCountryChangedAutomatic ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_BATTERYSTATECHANGED_PERCENT = nativeStaticGetKeyCommonCommonStateBatteryStateChangedPercent ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_MASS_STORAGE_ID = nativeStaticGetKeyCommonCommonStateMassStorageStateListChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGESTATELISTCHANGED_NAME = nativeStaticGetKeyCommonCommonStateMassStorageStateListChangedName ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_MASS_STORAGE_ID = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_SIZE = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedSize ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_USED_SIZE = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedUsedsize ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_PLUGGED = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedPlugged ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_FULL = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedFull ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOSTATELISTCHANGED_INTERNAL = nativeStaticGetKeyCommonCommonStateMassStorageInfoStateListChangedInternal ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTDATECHANGED_DATE = nativeStaticGetKeyCommonCommonStateCurrentDateChangedDate ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_CURRENTTIMECHANGED_TIME = nativeStaticGetKeyCommonCommonStateCurrentTimeChangedTime ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_FREE_SPACE = nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedFreespace ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_REC_TIME = nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedRectime ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGEINFOREMAININGLISTCHANGED_PHOTO_REMAINING = nativeStaticGetKeyCommonCommonStateMassStorageInfoRemainingListChangedPhotoremaining ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_WIFISIGNALCHANGED_RSSI = nativeStaticGetKeyCommonCommonStateWifiSignalChangedRssi ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME = nativeStaticGetKeyCommonCommonStateSensorsStatesListChangedSensorName ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORSTATE = nativeStaticGetKeyCommonCommonStateSensorsStatesListChangedSensorState ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL = nativeStaticGetKeyCommonCommonStateProductModelModel ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_LISTFLAGS = nativeStaticGetKeyCommonCommonStateCountryListKnownListFlags ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_COUNTRYLISTKNOWN_COUNTRYCODES = nativeStaticGetKeyCommonCommonStateCountryListKnownCountryCodes ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_MASS_STORAGE_ID = nativeStaticGetKeyCommonCommonStateMassStorageContentChangedMassstorageid ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBPHOTOS = nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbPhotos ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBVIDEOS = nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbVideos ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBPUDS = nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbPuds ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_MASSSTORAGECONTENTCHANGED_NBCRASHLOGS = nativeStaticGetKeyCommonCommonStateMassStorageContentChangedNbCrashLogs ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_OVERHEATSTATE_OVERHEATREGULATIONCHANGED_REGULATIONTYPE = nativeStaticGetKeyCommonOverHeatStateOverHeatRegulationChangedRegulationType ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_WIFISETTINGSSTATE_OUTDOORSETTINGSCHANGED_OUTDOOR = nativeStaticGetKeyCommonWifiSettingsStateOutdoorSettingsChangedOutdoor ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE = nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_FILEPATH = nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedFilepath ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE = nativeStaticGetKeyCommonMavlinkStateMavlinkFilePlayingStateChangedType ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR = nativeStaticGetKeyCommonMavlinkStateMavlinkPlayErrorStateChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_XAXISCALIBRATION = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedXAxisCalibration ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_YAXISCALIBRATION = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedYAxisCalibration ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_ZAXISCALIBRATION = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedZAxisCalibration ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATECHANGED_CALIBRATIONFAILED = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStateChangedCalibrationFailed ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONREQUIREDSTATE_REQUIRED = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationRequiredStateRequired ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationAxisToCalibrateChangedAxis ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTARTEDCHANGED_STARTED = nativeStaticGetKeyCommonCalibrationStateMagnetoCalibrationStartedChangedStarted ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_FOV = nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedFov ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMAX = nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedPanMax ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_PANMIN = nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedPanMin ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMAX = nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedTiltMax ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CAMERASETTINGSSTATE_CAMERASETTINGSCHANGED_TILTMIN = nativeStaticGetKeyCommonCameraSettingsStateCameraSettingsChangedTiltMin ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_AVAILABILITYSTATECHANGED_AVAILABILITYSTATE = nativeStaticGetKeyCommonFlightPlanStateAvailabilityStateChangedAvailabilityState ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT = nativeStaticGetKeyCommonFlightPlanStateComponentStateListChangedComponent ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_STATE = nativeStaticGetKeyCommonFlightPlanStateComponentStateListChangedState ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_CONTROLLERLIBARCOMMANDSVERSION_VERSION = nativeStaticGetKeyCommonARLibsVersionsStateControllerLibARCommandsVersionVersion ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_SKYCONTROLLERLIBARCOMMANDSVERSION_VERSION = nativeStaticGetKeyCommonARLibsVersionsStateSkyControllerLibARCommandsVersionVersion ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ARLIBSVERSIONSSTATE_DEVICELIBARCOMMANDSVERSION_VERSION = nativeStaticGetKeyCommonARLibsVersionsStateDeviceLibARCommandsVersionVersion ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_AUDIOSTATE_AUDIOSTREAMINGRUNNING_RUNNING = nativeStaticGetKeyCommonAudioStateAudioStreamingRunningRunning ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_LEFT = nativeStaticGetKeyCommonHeadlightsStateIntensityChangedLeft ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_HEADLIGHTSSTATE_INTENSITYCHANGED_RIGHT = nativeStaticGetKeyCommonHeadlightsStateIntensityChangedRight ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ANIM = nativeStaticGetKeyCommonAnimationsStateListAnim ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_STATE = nativeStaticGetKeyCommonAnimationsStateListState ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ANIMATIONSSTATE_LIST_ERROR = nativeStaticGetKeyCommonAnimationsStateListError ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY = nativeStaticGetKeyCommonAccessoryStateSupportedAccessoriesListChangedAccessory ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY = nativeStaticGetKeyCommonAccessoryStateAccessoryConfigChangedNewAccessory ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR = nativeStaticGetKeyCommonAccessoryStateAccessoryConfigChangedError ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGMODIFICATIONENABLED_ENABLED = nativeStaticGetKeyCommonAccessoryStateAccessoryConfigModificationEnabledEnabled ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE = nativeStaticGetKeyCommonChargerStateMaxChargeRateChangedRate ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS = nativeStaticGetKeyCommonChargerStateCurrentChargeStateChangedStatus ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE = nativeStaticGetKeyCommonChargerStateCurrentChargeStateChangedPhase ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE = nativeStaticGetKeyCommonChargerStateLastChargeRateChangedRate ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE = nativeStaticGetKeyCommonChargerStateChargingInfoPhase ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_RATE = nativeStaticGetKeyCommonChargerStateChargingInfoRate ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_INTENSITY = nativeStaticGetKeyCommonChargerStateChargingInfoIntensity ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_CHARGERSTATE_CHARGINGINFO_FULLCHARGINGTIME = nativeStaticGetKeyCommonChargerStateChargingInfoFullChargingTime ();
        ARCONTROLLER_DICTIONARY_KEY_COMMON_RUNSTATE_RUNIDCHANGED_RUNID = nativeStaticGetKeyCommonRunStateRunIdChangedRunId ();
    }
    
    /**
     * Constructor
     */
    public ARFeatureCommon (long nativeFeature)
    {
        initOk = false;
        
        if (nativeFeature != 0)
        {
            jniFeature = nativeFeature;
            initOk = true;
        }
    }

    /**
     * Dispose
     */
    public void dispose()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                jniFeature = 0;
                initOk = false;
            }
        }
    }

    /**
     * Destructor
     */
    public void finalize () throws Throwable
    {
        try
        {
            dispose ();
        }
        finally
        {
            super.finalize ();
        }
    }
    
    /**
     * Send a command <code>NetworkDisconnect</code>
     * @deprecated
     * Signals the remote that the host will disconnect and close its
     * libARNetwork instance (and all threads that use libARNetwork)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendNetworkDisconnect ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendNetworkDisconnect (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsAllSettings</code>
     * Get all product settings, the product must send all settings
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsAllSettings ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsAllSettings (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsReset</code>
     * Reset all settings
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsReset ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsReset (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsProductName</code>
     * Set Product name
     * @param name Product name
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsProductName (String _name)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsProductName (jniFeature, _name);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsCountry</code>
     * Set current Country of controller
     * @param code Country code with ISO 3166 format
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsCountry (String _code)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsCountry (jniFeature, _code);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>SettingsAutoCountry</code>
     * Set Auto Country Settings
     * @param automatic Boolean : 0 : Manual / 1 : Auto
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendSettingsAutoCountry (byte _automatic)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendSettingsAutoCountry (jniFeature, _automatic);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CommonAllStates</code>
     * Get all product states.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCommonAllStates ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCommonAllStates (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CommonCurrentDate</code>
     * Set current date of controller
     * @param date Date with ISO-8601 format
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCommonCurrentDate (String _date)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCommonCurrentDate (jniFeature, _date);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CommonCurrentTime</code>
     * Set current time of controller
     * @param time Time with ISO-8601 format
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCommonCurrentTime (String _time)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCommonCurrentTime (jniFeature, _time);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CommonReboot</code>
     * Command to ask reboot to product
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCommonReboot ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCommonReboot (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>OverHeatSwitchOff</code>
     * @deprecated
     * Switch off the drone when a overheat appeared
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendOverHeatSwitchOff ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendOverHeatSwitchOff (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>OverHeatVentilate</code>
     * @deprecated
     * Ventilate the drone when a overheat appeared
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendOverHeatVentilate ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendOverHeatVentilate (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ControllerIsPiloting</code>
     * Tell the device when the controller application enters/leaves the piloting HUD.
     * @param piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendControllerIsPiloting (byte _piloting)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendControllerIsPiloting (jniFeature, _piloting);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>WifiSettingsOutdoorSetting</code>
     * Send to product if it should use its outdoor wifi config, or indoor
     * @param outdoor 1 if it should use outdoor wifi settings, 0 otherwise
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendWifiSettingsOutdoorSetting (byte _outdoor)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendWifiSettingsOutdoorSetting (jniFeature, _outdoor);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MavlinkStart</code>
     * Start the flight plan
     * @param filepath flight plan file path from the mavlink ftp root
     * @param type type of the played mavlink file
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMavlinkStart (String _filepath, ARCOMMANDS_COMMON_MAVLINK_START_TYPE_ENUM _type)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMavlinkStart (jniFeature, _filepath, _type.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MavlinkPause</code>
     * Pause the flightplan (can be restarted with a start)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMavlinkPause ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMavlinkPause (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>MavlinkStop</code>
     * Stop the flightplan
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendMavlinkStop ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendMavlinkStop (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>CalibrationMagnetoCalibration</code>
     * Sent when a calibration of the magnetometer is asked or is aborted
     * @param calibrate 1 if the calibration should be started, 0 if it should be aborted
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendCalibrationMagnetoCalibration (byte _calibrate)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendCalibrationMagnetoCalibration (jniFeature, _calibrate);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>GPSControllerPositionForRun</code>
     * Set the controller position for a run. This command is used by all non gps products. Watch out, this command cannot be used with BLE products
     * @param latitude Controller latitude in decimal degrees
     * @param longitude Controller longitude in decimal degrees
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendGPSControllerPositionForRun (double _latitude, double _longitude)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendGPSControllerPositionForRun (jniFeature, _latitude, _longitude);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AudioControllerReadyForStreaming</code>
     * Tell the firmware whether the controller is ready to start audio streaming.
     * @param ready Bit field for TX and RX ready. bit 0 is 1 if controller is ready and wants to receive sound (Drone TX) bit 1 is 1 if controller is ready and wants to send sound (Drone RX)
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAudioControllerReadyForStreaming (byte _ready)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAudioControllerReadyForStreaming (jniFeature, _ready);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>HeadlightsIntensity</code>
     * Set instensity of lighting LEDs.
     * @param left Set the left LED intensity value (0 through 255).
     * @param right Set the right LED intensity value (0 through 255).
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendHeadlightsIntensity (byte _left, byte _right)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendHeadlightsIntensity (jniFeature, _left, _right);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsStartAnimation</code>
     * Start a paramaterless animation.
     * @param anim Animation to start.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsStartAnimation (ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_ENUM _anim)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsStartAnimation (jniFeature, _anim.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsStopAnimation</code>
     * Stop a running animation.
     * @param anim Animation to stop.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsStopAnimation (ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_ENUM _anim)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsStopAnimation (jniFeature, _anim.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AnimationsStopAllAnimations</code>
     * Stop all running animations.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAnimationsStopAllAnimations ()
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAnimationsStopAllAnimations (jniFeature);
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>AccessoryConfig</code>
     * Set the current accessory configuration.
     * @param accessory Accessory configuration to set.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendAccessoryConfig (ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_ENUM _accessory)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendAccessoryConfig (jniFeature, _accessory.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    
    /**
     * Send a command <code>ChargerSetMaxChargeRate</code>
     * @deprecated
     * Set the maximum charge rate allowed to charge a battery.
     * @param rate The new maximum charge rate.
     * return executing error
     */
    public ARCONTROLLER_ERROR_ENUM sendChargerSetMaxChargeRate (ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_ENUM _rate)
    {
        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;
        synchronized (this)
        {
            if(initOk == true)
            {
                int nativeError = nativeSendChargerSetMaxChargeRate (jniFeature, _rate.getValue());
                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);
            }
        }
        return error;
    }
    

}

