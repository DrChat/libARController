#!/usr/bin/env python

'''
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
'''

import sys
import os
import re

MYDIR=os.path.abspath(os.path.dirname(sys.argv[0]))
if '' == MYDIR:
    MYDIR=os.getcwd()

sys.path.append('%(MYDIR)s/../../ARBuildUtils/Utils/Python' % locals())

from ARFuncs import *
from ARCommandsParser import *
from ARControllerUtils import *

def generateFeatureControllers (allFeatures, SRC_DIR, INC_DIR):

    ARPrint ('generateFeatureControllers ...')

    #########################################
    # Write Feature controller header file  #
    #########################################

    #for feature in allFeatures: # see automake all source of folder !!!!
        
    #ARPrint ('feature.name = ' + feature.name) # see automake all source of folder !!!!

    #className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
    includeDefine = '_' + MODULE_FEATURE + '_H_' #includeDefine = '_' + ARMacroName (MODULE_FEATURE, feature.name, 'H') + '_'  # see automake all source of folder !!!!

    headerFileName = 'ARCONTROLLER_Feature.h' #headerFileName = className + '.h'!!!!
    filepath = INC_DIR + headerFileName
    hfile = open (filepath, 'w')

    hfile.write ('/**********************************************************\n')
    hfile.write (' *            AUTOGENERATED FILE                          *\n')
    hfile.write (' *             DO NOT MODIFY IT                           *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' * To add new commands :                                  *\n')
    hfile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hfile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' **********************************************************/\n')
    hfile.write ('\n')

    hfile.write ('/**\n')
    hfile.write ('* @file '+headerFileName+'\n')
    hfile.write ('* @brief Feature controller allow to send command related of a Feature.\n') #hfile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
    hfile.write ('*/\n')
    hfile.write ('\n')

    hfile.write ('#ifndef '+includeDefine+'\n')
    hfile.write ('#define '+includeDefine+'\n')
    hfile.write ('\n')

    hfile.write ('#include <stdlib.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARSAL/ARSAL_Print.h>\n')
    hfile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hfile.write ('#include <libARCommands/ARCommands.h>\n')
    hfile.write ('#include <libuthash/uthash.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Error.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Command.h>\n')
    hfile.write ('\n')

    #hfile.write ('/**\n')
    #hfile.write (' * @brief .\n')
    #hfile.write (' */\n')
    #hfile.write ('typedef enum  \n')
    #hfile.write ('{\n')
    #for cType in XMLTYPES:
        #hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', cType)+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'uint8')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'int8')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'uint16')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'int16')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'uint32')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'int32')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'uint64')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'int64')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'float')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'double')+',\n')
    ##hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'string')+',\n')
    #hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'ENUM')+', /**< enumeration relative to the commands. must be read as I32 type. */\n')
    #hfile.write ('     \n')
    #hfile.write ('    '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'MAX')+',\n')
    #hfile.write ('}'+AREnumName(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE')+';\n')
    #hfile.write ('\n')

    #hfile.write ('/**\n')
    #hfile.write (' * @brief .\n')
    #hfile.write (' */\n')
    #hfile.write ('typedef union \n')
    #hfile.write ('{\n')
    #for cType in CTYPES:
        #index = CTYPES.index (cType)
        #hfile.write ('    '+cType+' '+ARCapitalize(XMLTYPES [index])+';\n')

    ##hfile.write ('    uint8_t u8;\n')
    ##hfile.write ('    int8_t i8;\n')
    ##hfile.write ('    uint16_t u16;\n')
    ##hfile.write ('    int16_t i16;\n')
    ##hfile.write ('    uint32_t u32;\n')
    ##hfile.write ('    int32_t i32;\n')
    ##hfile.write ('    uint64_t u64;\n')
    ##hfile.write ('    int64_t i64;\n')
    ##hfile.write ('    float Float;\n')  
    ##hfile.write ('    double Double;\n')
    ##hfile.write ('    char * String;\n')
    #hfile.write ('}'+ARTypeName(MODULE_FEATURE, 'DICTIONARY', "VALUE")+';\n')
    #hfile.write ('\n')

    #hfile.write ('/**\n')
    #hfile.write (' * @brief Dictionary element to storing the commands arguments coming from the device.\n')
    #hfile.write (' */\n')
    #hfile.write ('typedef struct \n')
    #hfile.write ('{\n')
    #hfile.write ('    const char *argument; /**< Key associates to the argument.*/\n')
    #hfile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', "VALUE")+' value; /**< Value associates to the key ; value of the argument*/\n')
    #hfile.write ('    '+AREnumName(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE')+' valueType; /**< Type of the value*/\n')
    #hfile.write ('    UT_hash_handle hh; /**< makes this structure hashable */\n')
    #hfile.write ('}'+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+';\n')
    #hfile.write ('\n')

    #hfile.write ('/**\n')
    #hfile.write (' * @brief Dictionary element to storing the commands coming from the device.\n')
    #hfile.write (' */\n')
    #hfile.write ('typedef struct \n')
    #hfile.write ('{\n')
    #hfile.write ('    int command; /**< Key associates to the command */\n') # TODO the ARCOMMANDS big enum  
    #hfile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' *arguments; /**< Arguments of the command coming from the device. */\n')
    #hfile.write ('    UT_hash_handle hh; /**< makes this structure hashable */\n')
    #hfile.write ('}'+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+';\n')
    #hfile.write ('\n')

    #hfile.write ('/**\n')
    #hfile.write (' * @brief Callbacks to use when the command is received\n')
    #hfile.write (' * @param[in] command name of the commands\n')
    #hfile.write (' * @param[in] dictionary stores arguments of the command .\n')
    #hfile.write (' */\n')
    #hfile.write ('typedef void (*'+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'CALLBACK')+') (char *command, '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictionary);\n')
    #hfile.write ('\n')
    
    ## TODO sup !!!!!!!!!!!!!!!!!!!!!!!!!! replace by the ARCommand big Enum
    #hfile.write ('/**\n')
    #hfile.write (' * \n') # TODO add !!!!!!!!!!!!!!!!!!!!!!!!!!
    #hfile.write (' */\n')
    #hfile.write ('typedef enum \n')
    #hfile.write ('{\n')
    #first = True
    #for feature in allFeatures:
        #for cl in feature.classes:
            
            #if first:
                #hfile.write ('    '+defineNotification(MODULE_FEATURE, feature, cl)+' = 0,/**< Key used to define the class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> */\n')
                #first = False
            #else:
                #hfile.write ('    '+defineNotification(MODULE_FEATURE, feature, cl)+',/**< Key used to define the class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> */\n')
            
            #if isEvent(cl) or isState(cl):
                #for cmd in cl.cmds:
                    ##if first:
                        ##hfile.write ('    '+defineNotification(MODULE_FEATURE, feature, cl, cmd)+' = 0,/**< Key used to define the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> */\n')
                        ##first = False
                    ##else:
                        ##hfile.write ('    '+defineNotification(MODULE_FEATURE, feature, cl, cmd)+',/**< Key used to define the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> */\n')
                    #hfile.write ('    '+defineNotification(MODULE_FEATURE, feature, cl, cmd)+',/**< Key used to define the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> */\n')
    #hfile.write ('    '+AREnumValue(MODULE_FEATURE,  feature.name, 'DICTIONARY_KEY','MAX')+', /**< Unused, iterator maximum value */\n')
    #hfile.write ('}'+defineNotificationDef()+';\n')
    #hfile.write ('\n')
    

    for feature in allFeatures: # see automake all source of folder !!!!!!!!!!!!!!
        
        ARPrint ('feature.name = ' + feature.name) # see automake all source of folder !!!!
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        hfile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        hfile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        hfile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Private part of '+className+'.\n')
        hfile.write (' */\n')
        hfile.write ('typedef struct '+classPrivName+' '+classPrivName+';\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
        for comment in feature.comments:
            hfile.write (' * ' + comment+'\n')
        hfile.write (' */\n')
        hfile.write ('typedef struct '+className+' '+className+';\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Create a new '+feature.name+' Feature Controller\n')
        hfile.write (' * @warning This function allocate memory\n')
        hfile.write (' * @post ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+'() must be called to delete the Feature Controller and free the memory allocated.\n')
        hfile.write (' * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+'().\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' * @return the new '+feature.name+' Feature Controller\n')
        hfile.write (' * @see ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+'\n')
        hfile.write (' */\n')
        hfile.write (''+className+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+' (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Delete the '+feature.name+' Feature Controller\n')
        hfile.write (' * @warning This function free memory\n')
        hfile.write (' * @param feature The feature controller to delete\n')
        hfile.write (' * @see ' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+'\n')
        hfile.write (' */\n')
        hfile.write ('void ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' ('+className+' **feature);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Get the dictionay of the '+feature.name+' Feature Controller\n')
        hfile.write (' * @param feature The feature controller owning the dictionary to get\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' */\n')
        hfile.write (''+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'GetDictionary')+' ('+className+' *feature, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
            
        hfile.write ('/**\n')
        hfile.write (' * @brief Add a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] callback the callback to add.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be associated.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' * @param[int] customData custom data given as parameter to the callback.\n')
        hfile.write (' * @see '+ARFunctionName(MODULE_FEATURE, feature.name, 'removeCallback')+'.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'addCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'CALLBACK')+' callback, void *customData);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Remove a callback used when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be unassociated.\n')
        hfile.write (' * @param[in] callback the callback to remove.\n')
        hfile.write (' * @param[int] customData The custom data given to the register.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'removeCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'CALLBACK')+' callback, void *customData);\n')
        hfile.write ('\n')
        
        for cl in feature.classes:
            hfile.write ('/**\n')
            hfile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                hfile.write (' * ' + comment+'\n')
            hfile.write (' */\n')
            hfile.write ('\n')
            
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    #TODO sup !!!!!!!!!!!!!!!!!!!!!!!!!!!
                    #hfile.write ('#define ' + defineNotification(MODULE_FEATURE, feature, cl, cmd) + ' "' + defineNotification(MODULE_FEATURE, feature, cl, cmd).lower() + '";\n')
                    #hfile.write ('char * ' + defineNotification(MODULE_FEATURE, feature, cl, cmd) + ' = "' + defineNotification(MODULE_FEATURE, feature, cl, cmd).lower() + '";\n')
                    for arg in cmd.args:
                        #hfile.write ('#define ' + defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg) + ' "' + defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg).lower() + '";\n')
                        #hfile.write ('extern const char *' + defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg) + ';\n')
                        hfile.write ('extern const char *' + defineNotification(feature, cl, cmd, arg) + ';\n')
                        
            hfile.write('\n');
            
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hfile.write ('/**\n')
                    hfile.write (' * @brief Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                    for comment in cmd.comments:
                        hfile.write (' * ' + comment+'\n')
                    hfile.write (' * @param feature feature owning the commands\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hfile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hfile.write (' * return executing error\n')
                    hfile.write (' */\n')
                    hfile.write ('typedef eARCONTROLLER_ERROR (*'+ sendingFunctionType (MODULE_FEATURE, feature, cl, cmd)+') ('+className+' *feature')
                    for arg in cmd.args:
                        hfile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    hfile.write (');\n')
                    hfile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hfile.write ('/**\n')
                        hfile.write (' * @brief Set the parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                        for comment in cmd.comments:
                            hfile.write (' * ' + comment+'\n')
                        hfile.write (' * @param feature feature owning the commands\n')
                        for arg in cmd.args:
                            for comm in arg.comments:
                                hfile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                        hfile.write (' * return executing error\n')
                        hfile.write (' */\n')
                        hfile.write ('typedef eARCONTROLLER_ERROR (*' + setNAckFunctionType (feature, cl, cmd)+') ('+className+' *feature')
                        for arg in cmd.args:
                            hfile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                        hfile.write (');\n')
                        hfile.write ('\n')
                        
                        hfile.write ('/**\n')
                        hfile.write (' * @brief Send the a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> with the parame set beforehand \n')
                        for comment in cmd.comments:
                            hfile.write (' * ' + comment+'\n')
                        hfile.write (' * @param feature feature owning the commands\n')
                        hfile.write (' * @param cmdBuffer buffer to store the command\n')
                        hfile.write (' * @param cmdBufferSize size of the buffer\n')
                        hfile.write (' * return executing error\n')
                        hfile.write (' */\n')
                        hfile.write ('eARCONTROLLER_ERROR '+ sendNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);\n')
                        hfile.write ('\n')
                    
            
        hfile.write ('/**\n')
        hfile.write (' * @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
        for comment in feature.comments:
            hfile.write (' * ' + comment+'\n')
        hfile.write (' */\n')
        hfile.write ('struct '+className+'\n')
        hfile.write ('{\n')
        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hfile.write ('    '+sendingFunctionType (MODULE_FEATURE, feature, cl, cmd)+' '+sendingFunction(cl, cmd)+';\n')
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hfile.write ('    '+setNAckFunctionType (feature, cl, cmd)+' '+setNAckFunction(cl, cmd)+';\n')
        hfile.write ('    '+classPrivName+' *privatePart; /**< Private part of '+className+' */\n')
        hfile.write ('};\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Set a NetworkController to use to send commands.\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be unassociated.\n')
        hfile.write (' * @param[in] networkController The networkController used to send commands ; must be not NULL.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+' ('+className+' *feature, ARCONTROLLER_Network_t *networkController);\n')
        hfile.write ('\n')
        
        #TODO add commentary !!!!!!!!!!!
        hfile.write ('ARCONTROLLER_FEATURE_DICTIONARY_ARG_t *' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandArguments')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
        
        
    hfile.write ('#endif /* '+includeDefine+' */\n')
    hfile.write ('\n')
    hfile.write ('// END GENERATED CODE\n')
    hfile.close () # see automake all source of folder !!!!!!!!
        
    #################################################
    # Write Feature controller private header file  #
    #################################################
        
    #for feature in allFeatures: # see automake all source of folder !!!!!!!

    ARPrint ('feature.name = ' + feature.name)

    #className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
    includeDefine = '_' + MODULE_FEATURE + '_PRIVATE_H_' #includeDefine = '_' + ARMacroName (MODULE_FEATURE, feature.name, 'PRIVATE_H') + '_'  # see automake all source of folder !!!!

    headerPrivateFileName = 'ARCONTROLLER_Feature' + '.h'  #headerPrivateFileName = className + '.h' # see automake all source of folder !!!!
    filepath = SRC_DIR + headerPrivateFileName
    hPrivFile = open (filepath, 'w')

    hPrivFile.write ('/**********************************************************\n')
    hPrivFile.write (' *            AUTOGENERATED FILE                          *\n')
    hPrivFile.write (' *             DO NOT MODIFY IT                           *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' * To add new commands :                                  *\n')
    hPrivFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hPrivFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' **********************************************************/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('/**\n')
    hPrivFile.write ('* @file '+headerPrivateFileName+'\n')
    hPrivFile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
    hPrivFile.write ('*/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('#ifndef '+includeDefine+'\n')
    hPrivFile.write ('#define '+includeDefine+'\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hPrivFile.write ('#include <libARCommands/ARCommands.h>\n')
    hPrivFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' ('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' **dictionary);\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' ('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' **dictionary);\n')
    hPrivFile.write ('\n')
        
    for feature in allFeatures: # see automake all source of folder !!!!!!!!
        
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        hPrivFile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        hPrivFile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        hPrivFile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief Parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('typedef struct\n')
                    hPrivFile.write ('{\n')
                    for arg in cmd.args:
                        hPrivFile.write ('    ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' '+arg.name+'; /**< */\n')
                    hPrivFile.write ('}'+structNAckType (feature, cl, cmd)+';\n')
                    hPrivFile.write ('\n')
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Private part of '+className+'.\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('struct '+classPrivName+'\n')
        hPrivFile.write ('{\n')
        hPrivFile.write ('    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */\n')
        hPrivFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictionary; /**< stores states and settings of the device */\n')
        hPrivFile.write ('    ARCONTROLLER_Command_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */\n')

        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    hPrivFile.write ('    '+structNAckType (feature, cl, cmd)+' *'+structNAckName (cl, cmd)+'; /**< */\n')
        hPrivFile.write ('};\n')
        hPrivFile.write ('\n')
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Register the feature controller to be called when the commands are decoded.\n')
        hPrivFile.write (' * @param feature The feature controller to register\n')
        hPrivFile.write (' * return executing error\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' ('+className+' *feature);\n')
        hPrivFile.write ('\n')
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Unegister the feature controller to be called when the commands are decoded.\n')
        hPrivFile.write (' * @param feature The feature controller to unregister\n')
        hPrivFile.write (' * return executing error\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnegisterARCommands')+' ('+className+' *feature);\n')
        hPrivFile.write ('\n')
        
        for cl in feature.classes:
            hPrivFile.write ('/**\n')
            hPrivFile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                hPrivFile.write (' * ' + comment+'\n')
            hPrivFile.write (' */\n')
            hPrivFile.write ('\n')
            
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                    for comment in cmd.comments:
                        hPrivFile.write (' * ' + comment+'\n')
                    hPrivFile.write (' * @param feature feature owning the commands\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hPrivFile.write (' * return executing error\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('eARCONTROLLER_ERROR ' + sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+' ('+className+' *feature')
                    for arg in cmd.args:
                        hPrivFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    hPrivFile.write (');\n')
                    hPrivFile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hPrivFile.write ('/**\n')
                        hPrivFile.write (' * @brief Set the parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                        for comment in cmd.comments:
                            hPrivFile.write (' * ' + comment+'\n')
                        hPrivFile.write (' * @param feature feature owning the commands\n')
                        for arg in cmd.args:
                            for comm in arg.comments:
                                hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                        hPrivFile.write (' * return executing error\n')
                        hPrivFile.write (' */\n')
                        hPrivFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature')
                        for arg in cmd.args:
                            hPrivFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                        hPrivFile.write (');\n')
                        hPrivFile.write ('\n')
                    
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief callback used when the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + ' is decoded\n')
                    hPrivFile.write (' * @param feature The feature controller registred\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hPrivFile.write (' * @param customData customData set by the register\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('void '+decodeCallback (feature, cl, cmd)+' (')
                    for arg in cmd.args:
                        hPrivFile.write (xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name + ', ')
                    hPrivFile.write ('void *customData);\n')
                    hPrivFile.write ('\n')
        
        
        hPrivFile.write ('\n')
        
    hPrivFile.write ('#endif /* '+includeDefine+' */\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('// END GENERATED CODE\n')
    hPrivFile.close () # see automake all source of folder !!!!!!!!
        
    #################################################
    # Write Feature controller c file               #
    #################################################
        
    #for feature in allFeatures: # see automake all source of folder !!!!!!!!!!!
        
    #className = ARTypeName (MODULE_FEATURE, feature.name, '') # see automake all source of folder !!!!!!!!!!
    classTag = 'ARCONTROLLER_Feature' #classTag = ARMacroName (MODULE_FEATURE, feature.name, '') # see automake all source of folder !!!!!!!!!!

    cFileName = 'ARCONTROLLER_Feature.c' #cFileName = className + '.c' # see automake all source of folder !!!!!!!!!!
    filepath = SRC_DIR + cFileName
    cFile = open (filepath, 'w')

    cFile.write ('/**********************************************************\n')
    cFile.write (' *            AUTOGENERATED FILE                          *\n')
    cFile.write (' *             DO NOT MODIFY IT                           *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' * To add new commands :                                  *\n')
    cFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    cFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' **********************************************************/\n')
    cFile.write ('\n')

    cFile.write ('/**\n')
    cFile.write ('* @file '+cFileName+'\n')
    cFile.write ('* @brief Feature controller allow to send command related of a Feature.\n') #cFile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n') # see automake all source of folder !!!!!!!!!!
    cFile.write ('*/\n')
    cFile.write ('\n')

    cFile.write ('#include <stdio.h>\n')

    cFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    cFile.write ('#include <libARCommands/ARCommands.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Network.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    cFile.write ('\n')
    cFile.write ('#include "ARCONTROLLER_Feature.h"\n')
    cFile.write ('\n')
    cFile.write ('#define '+MODULE_FEATURE+'_TAG "'+classTag+'"\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' ('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' **dictionary)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete a commands dictionary --\n')
    cFile.write ('    \n')
    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictElement = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictTmp = NULL;\n')
    cFile.write ('    \n')

    cFile.write ('    if (dictionary != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*dictionary) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            // Free the hash table contents\n')
    cFile.write ('            HASH_ITER(hh, (*dictionary), dictElement, dictTmp)\n')
    cFile.write ('            {\n')
    cFile.write ('                /* for each element of the commands dictionary */\n')
    cFile.write ('                if (dictElement->arguments != NULL)\n')
    cFile.write ('                {\n')
    cFile.write ('                    ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' (&(dictElement->arguments));\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                HASH_DEL((*dictionary), dictElement);\n')
    cFile.write ('                free(dictElement);\n')
    cFile.write ('                dictElement = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')

    cFile.write ('            free (*dictionary);\n')
    cFile.write ('            (*dictionary) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')

    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' ('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' **dictionary)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete arguments dictionary --\n')
    cFile.write ('    \n')
    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' *dictElement = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' *dictTmp = NULL;\n')
    cFile.write ('    \n')

    cFile.write ('    if (dictionary != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*dictionary) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            // Free the hash table contents\n')
    cFile.write ('            HASH_ITER(hh, (*dictionary), dictElement, dictTmp)\n')
    cFile.write ('            {\n')
    cFile.write ('                /* for each element of the arguments dictionary */\n')
    cFile.write ('                if ((dictElement->valueType == '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', 'string')+') && (dictElement->value.'+ARCapitalize('string')+' != NULL))\n')
    cFile.write ('                {\n')
    cFile.write ('                    free (dictElement->value.'+ARCapitalize('string')+');\n')
    cFile.write ('                    dictElement->value.'+ARCapitalize('string')+' = NULL;\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')

    cFile.write ('                HASH_DEL((*dictionary), dictElement);\n')
    cFile.write ('                free(dictElement);\n')
    cFile.write ('                dictElement = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')

    cFile.write ('            free (*dictionary);\n')
    cFile.write ('            (*dictionary) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')

    for feature in allFeatures: # see automake all source of folder !!!!!!!!
        
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        cFile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        cFile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        cFile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        cFile.write ('\n')
        
        cFile.write ('/*************************\n')
        cFile.write (' * Private header\n')
        cFile.write (' *************************/\n')
        cFile.write ('\n')
        
        cFile.write ('/*************************\n')
        cFile.write (' * Implementation\n')
        cFile.write (' *************************/\n')
        cFile.write ('\n')
        
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        #cFile.write ('const char *' + defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg) + ' = "' + defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg).lower() + '";\n')
                        cFile.write ('const char *' + defineNotification(feature, cl, cmd, arg) + ' = "' + defineNotification(feature, cl, cmd, arg).lower() + '";\n')
            cFile.write('\n');
        
        cFile.write (''+className+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+' (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Create a new Feature Controller...");\n')
                        
        cFile.write ('    // -- Create a new Feature Controller --\n')
        cFile.write ('    \n')
        
        cFile.write ('    //local declarations\n')
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('   '+className+' *featureController =  NULL;\n')
        cFile.write ('    \n')
        
        #cFile.write ('    // check parameters\n')
        #cFile.write ('    if (networkController == NULL)\n')
        #cFile.write ('    {\n')
        #cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        #cFile.write ('    }\n')
        #cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        #cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Create the Feature Controller...");\n')
        cFile.write ('        // Create the Feature Controller\n')
        cFile.write ('        featureController = malloc (sizeof ('+className+'));\n')
        cFile.write ('        if (featureController != NULL)\n')
        cFile.write ('        {\n')

        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('            featureController->'+sendingFunction(cl, cmd)+' = '+sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+';\n')
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('            featureController->'+setNAckFunction(cl, cmd)+' = '+setNAckFunctionName (feature, cl, cmd)+';\n')
        cFile.write ('            \n')
        cFile.write ('            featureController->privatePart = NULL;\n')
        cFile.write ('        }\n')
        cFile.write ('        else\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        // Create the Feature Controller private part\n')
        cFile.write ('        featureController->privatePart = malloc (sizeof ('+classPrivName+'));\n')
        cFile.write ('        if (featureController->privatePart != NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            featureController->privatePart->networkController = networkController;\n')
        cFile.write ('            featureController->privatePart->dictionary = NULL;\n')
        cFile.write ('            featureController->privatePart->commandCallbacks = NULL;\n')
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('            featureController->privatePart->'+structNAckName (cl, cmd)+' = NULL;\n')
        cFile.write ('        }\n')
        cFile.write ('        else\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        featureController->privatePart->'+structNAckName (cl, cmd)+' = calloc (1, sizeof ('+structNAckType (feature, cl, cmd)+'));\n')
                    cFile.write ('        if (featureController->privatePart == NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No else: skipped by an error \n')
                    cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' (featureController);\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        cFile.write ('    // delete the feature Controller if an error occurred\n')
        cFile.write ('    if (localError != ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' (&featureController);\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped no error \n')
        cFile.write ('    \n')
        
        cFile.write ('    // return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return featureController;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('void ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' ('+className+' **feature)\n')
        cFile.write ('{\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Delete '+feature.name+' Feature Controller...");\n')
        
        cFile.write ('    // -- Delete the '+feature.name+' feature Controller --\n')
        cFile.write ('    \n')
        cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictElement = NULL;\n')
        cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictTmp = NULL;\n')
        
        cFile.write ('    if (feature != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        if ((*feature) != NULL)\n')
        cFile.write ('        {\n')
        
        cFile.write ('            '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnregisterARCommands')+' ((*feature));\n')
        cFile.write ('            \n')
        
        cFile.write ('            if ((*feature)->privatePart != NULL)\n')
        cFile.write ('            {\n')
        
        cFile.write ('                if ((*feature)->privatePart->dictionary != NULL)\n')
        cFile.write ('                {\n')
        cFile.write ('                    ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' (&((*feature)->privatePart->dictionary));\n')
        cFile.write ('                }\n')
        cFile.write ('                \n')
        
        cFile.write ('                if ((*feature)->privatePart->commandCallbacks != NULL)\n')
        cFile.write ('                {\n')
        cFile.write ('                    // Free the hash table contents the command callback\n')
        cFile.write ('                    ARCONTROLLER_COMMAND_DeleteDictionary (&((*feature)->privatePart->commandCallbacks));\n')
        cFile.write ('                }\n')
        cFile.write ('                \n')
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('                if ((*feature)->privatePart->'+structNAckName (cl, cmd)+' != NULL)\n')
                    cFile.write ('                {\n')
                    cFile.write ('                    free ((*feature)->privatePart->'+structNAckName (cl, cmd)+');\n')
                    cFile.write ('                    (*feature)->privatePart->'+structNAckName (cl, cmd)+' = NULL;\n')
                    cFile.write ('                }\n')
        
        cFile.write ('                free ((*feature)->privatePart);\n')
        cFile.write ('                (*feature)->privatePart = NULL;\n')
        cFile.write ('            }\n')
        cFile.write ('            \n')
        
        cFile.write ('            free (*feature);\n')
        cFile.write ('            (*feature) = NULL;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write (''+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'GetDictionary')+' ('+className+' *feature, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Get the dictionary of the '+feature.name+' Feature Controller --\n')
        cFile.write ('    \n')
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *dictionary = NULL;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        dictionary = feature->privatePart->dictionary;\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    // return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return dictionary;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'AddCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'CALLBACK')+' callback, void *customData)\n')
        cFile.write ('{\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Add a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code>...");\n')
        
        cFile.write ('    // -- Add a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "ARCONTROLLER_COMMAND_AddElementDictionary  feature: %p...", feature);\n')
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "ARCONTROLLER_COMMAND_AddElementDictionary  feature->privatePart->commandCallbacks: %p...", feature->privatePart->commandCallbacks);\n')
        
        cFile.write ('        error = ARCONTROLLER_COMMAND_AddDictionaryElement (&(feature->privatePart->commandCallbacks), commandKey, callback, customData);\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "... feature->privatePart->commandCallbacks: %p...", feature->privatePart->commandCallbacks);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'RemoveCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'CALLBACK')+' callback, void *customData)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Remove a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        
        cFile.write ('        error = ARCONTROLLER_COMMAND_RemoveDictionaryElement (feature->privatePart->commandCallbacks, commandKey, callback, customData);\n')
        
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' ('+className+' *feature)\n')
        cFile.write ('{\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, " RegisterARCommands feature : %p...", feature);\n')
        
        cFile.write ('    // -- Register the feature controller to be called when the commands are decoded. -- \n')
        cFile.write ('    \n')
        cFile.write ('    eARCONTROLLER_ERROR error = ARNETWORK_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                cFile.write ('        // Commands of class : '+cl.name+':\n')
                for cmd in cl.cmds:
                    cFile.write ('        '+arcommandsSetDecode(feature, cl, cmd)+' (&'+decodeCallback(feature, cl, cmd)+', feature);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnregisterARCommands')+' ('+className+' *feature)\n')
        cFile.write ('{\n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, " UnregisterARCommands feature : %p...", feature);\n')
        
        cFile.write ('    // -- Unregister the feature controller to be called when the commands are decoded. -- \n')
        cFile.write ('    \n')
        cFile.write ('    eARCONTROLLER_ERROR error = ARNETWORK_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                cFile.write ('        // Commands of class : '+cl.name+':\n')
                for cmd in cl.cmds:
                    cFile.write ('        '+arcommandsSetDecode(feature, cl, cmd)+' (NULL, NULL);\n')
                    #cFile.write ('        '+ARFunctionName (MODULE_ARCOMMANDS, 'Decoder', 'Set'+ARCapitalize(feature.name) + ARCapitalize(cl.name) + ARCapitalize(cmd.name)+'Callback')+' (NULL, NULL);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        for cl in feature.classes:
            cFile.write ('/**\n')
            cFile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                cFile.write (' * ' + comment+'\n')
            cFile.write (' */\n')
            cFile.write ('\n')
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('eARCONTROLLER_ERROR ' + sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+' ('+className+' *feature')
                    for arg in cmd.args:
                        cFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    cFile.write (')\n')
                    cFile.write ('{\n')
                    
                    cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> ...");\n')
                    
                    cFile.write ('    // -- Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> --\n')
                    cFile.write ('    \n')
                    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                    cFile.write ('    u_int8_t cmdBuffer[128];\n')
                    cFile.write ('    int32_t cmdSize = 0;\n')
                    cFile.write ('    eARCOMMANDS_GENERATOR_ERROR cmdError = ARCOMMANDS_GENERATOR_OK;\n')
                    cFile.write ('    eARNETWORK_ERROR netError = ARNETWORK_OK;\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // check parameters\n')
                    cFile.write ('    if (feature == NULL)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    
                    cFile.write ('        // Send ' + ARCapitalize(cmd.name) + ' command\n')
                    cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "Send ' + ARCapitalize(cmd.name) + ' command ...");\n')
                    cFile.write ('        cmdError = ARCOMMANDS_Generator_Generate' + ARCapitalize(feature.name) + ARCapitalize(cl.name) + ARCapitalize(cmd.name) + '(cmdBuffer, sizeof(cmdBuffer), &cmdSize')
                    for arg in cmd.args:
                            cFile.write (', ' + arg.name)
                    cFile.write(');\n')
                    cFile.write ('        if (cmdError != ARCOMMANDS_GENERATOR_OK)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            error = ARCONTROLLER_ERROR_COMMAND_GENERATING;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    
                    bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_ACK'
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_NOT_ACK'
                    elif cmd.buf == ARCommandBuffer.ACK:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_ACK'
                    elif cmd.buf == ARCommandBuffer.HIGH_PRIO:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_HIGH_PRIORITY'
                        
                    timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP'
                    if cmd.timeout == ARCommandTimeoutPolicy.POP:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP'
                    elif cmd.timeout == ARCommandTimeoutPolicy.RETRY:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_RETRY'
                    elif cmd.timeout == ARCommandTimeoutPolicy.FLUSH:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_FLUSH'

                    cFile.write ('        error = ARCONTROLLER_Network_SendData (feature->privatePart->networkController, cmdBuffer, cmdSize, '+bufferType+', '+timeoutPolicy+', &netError);\n')
                    
                    ''' TODO manage error !!!!!!!!!!!!
                    cFile.write ('        \n')
                    cFile.write ('        if ((error != ARCONTROLLER_OK) || (netError != ARNETWORK_OK))\n')
                    cFile.write ('        {\n')
                    cFile.write ('            \n')
                    cFile.write ('        }\n')
                    '''

                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    return error;\n')
                    cFile.write ('}\n')
                    cFile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature')
                        for arg in cmd.args:
                            cFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                        cFile.write (')\n')
                        cFile.write ('{\n')
                        
                        cFile.write ('    // -- Set the parameter for the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> --\n')
                        cFile.write ('    \n')
                        cFile.write ('    eARCONTROLLER_ERROR _error = ARCONTROLLER_OK;\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    // check parameters\n')
                        cFile.write ('    if ((feature == NULL) ||\n')
                        cFile.write ('       (feature->privatePart == NULL) ||\n')
                        cFile.write ('       (feature->privatePart->'+structNAckName (cl, cmd)+' == NULL))\n')
                        cFile.write ('    {\n')
                        cFile.write ('        _error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                        cFile.write ('    }\n')
                        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (_error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        for arg in cmd.args:
                            cFile.write ('        feature->privatePart->'+structNAckName(cl, cmd)+'->' + arg.name + ' = '+arg.name+';\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    return _error;\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
                        
                        cFile.write ('eARCONTROLLER_ERROR '+ sendNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize)\n')
                        cFile.write ('{\n')
                        cFile.write ('    // -- Send the a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> with the parame set beforehand  --\n')
                        cFile.write ('    \n')
                        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                        cFile.write ('    eARCOMMANDS_GENERATOR_ERROR cmdError = ARCOMMANDS_GENERATOR_OK;\n')
                        cFile.write ('    eARNETWORK_ERROR netError = ARNETWORK_OK;\n')
                        cFile.write ('    int32_t cmdSize = 0;\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    // Check parameters\n')
                        cFile.write ('    if ((feature == NULL) ||\n')
                        cFile.write ('       (feature->privatePart == NULL) ||\n')
                        cFile.write ('       (feature->privatePart->'+structNAckName (cl, cmd)+' == NULL) ||\n')
                        cFile.write ('       (cmdBuffer == NULL))\n')
                        cFile.write ('    {\n')
                        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                        cFile.write ('    }\n')
                        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        
                        cFile.write ('        // Send ' + ARCapitalize(cmd.name) + ' command\n')
                        cFile.write ('        cmdError = ARCOMMANDS_Generator_Generate' + ARCapitalize(feature.name) + ARCapitalize(cl.name) + ARCapitalize(cmd.name) + '(cmdBuffer, cmdBufferSize, &cmdSize')
                        for arg in cmd.args:
                                cFile.write (', feature->privatePart->'+structNAckName (cl, cmd)+'->' + arg.name)
                        cFile.write(');\n')
                        cFile.write ('        if (cmdError != ARCOMMANDS_GENERATOR_OK)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            error = ARCONTROLLER_ERROR_COMMAND_GENERATING;\n')
                        cFile.write ('        }\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        cFile.write ('        error = ARCONTROLLER_Network_SendData (feature->privatePart->networkController, cmdBuffer, cmdSize, ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_NOT_ACK, ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP, &netError);\n')
                        cFile.write ('        if (netError != ARNETWORK_OK)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_ERROR, ARCONTROLLER_FEATURE_TAG, "Network sending error : %s", ARNETWORK_Error_ToString (netError));\n')
                        cFile.write ('        }\n')
                        cFile.write ('        \n')
                        
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    return error;\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
                    
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('void '+decodeCallback (feature, cl, cmd)+' (')
                    for arg in cmd.args:
                        cFile.write (xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name + ', ')
                    cFile.write ('void *customData)\n')
                    cFile.write ('{\n')
                    cFile.write ('    // -- callback used when the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + ' is decoded -- \n')
                    cFile.write ('    \n')
                    cFile.write ('    '+className+' *_feature = ('+className+' *)customData;\n')
                    cFile.write ('    eARCONTROLLER_ERROR _error = ARCONTROLLER_OK;\n')
                    cFile.write ('    int _elementAdded = 0;\n')
                    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *_dictNewElement = NULL;\n')
                    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+' *_dictOldElement = NULL;\n')
                    cFile.write ('    '+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+' *_argDictNewElement = NULL;\n')
                    cFile.write ('    ARCONTROLLER_Command_t *_commandCallback = NULL;\n')
                    if [ a for a in cmd.args if a.type == 'string' ]:
                        cFile.write ('    int _strLength = 0;\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // check parameters\n')
                    cFile.write ('    if ((_feature == NULL) || (_feature->privatePart == NULL))\n')
                    cFile.write ('    {\n')
                    cFile.write ('        _error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (_error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // New command element\n')
                    cFile.write ('        _dictNewElement = malloc (sizeof('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'COMMANDS')+'));\n')
                    cFile.write ('        if (_dictNewElement != NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            _dictNewElement->command = '+defineNotification(feature, cl, cmd)+';\n')
                    cFile.write ('            _dictNewElement->arguments = NULL;\n')
                    cFile.write ('        }\n')
                    cFile.write ('        else\n')
                    cFile.write ('        {\n')
                    cFile.write ('            _error == ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    for arg in cmd.args:
                        cFile.write ('    if (_error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        cFile.write ('        // New argument element\n')
                        cFile.write ('        _argDictNewElement = malloc (sizeof('+ARTypeName(MODULE_FEATURE, 'DICTIONARY', 'ARG')+'));\n')
                        cFile.write ('        if (_argDictNewElement != NULL)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            _argDictNewElement->valueType = '+AREnumValue(MODULE_FEATURE, 'DICTIONARY', 'VALUE_TYPE', arg.type)+';\n')
                        #cFile.write ('            _argDictNewElement->argument = '+defineNotificationKey(MODULE_FEATURE, feature, cl, cmd, arg)+';\n')
                        cFile.write ('            _argDictNewElement->argument = '+defineNotification(feature, cl, cmd, arg)+';\n')
                        
                        cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "add _argDictNewElement->argument : %s", _argDictNewElement->argument);\n')
                        
                        if arg.type == 'string':
                            cFile.write ('            _strLength = strlen('+arg.name+');\n')
                            cFile.write ('            _argDictNewElement->value.'+ARCapitalize(arg.type)+' = malloc (_strLength);\n')
                            cFile.write ('            if (_argDictNewElement->value.'+ARCapitalize(arg.type)+' != NULL)\n')
                            cFile.write ('            {\n')
                            cFile.write ('                strncpy (_argDictNewElement->value.'+ARCapitalize(arg.type)+', '+arg.name+', _strLength);\n')
                            cFile.write ('                _argDictNewElement->value.'+ARCapitalize(arg.type)+'[_strLength] = \'\\0\';\n')
                            cFile.write ('            }\n')
                            cFile.write ('            else\n')
                            cFile.write ('            {\n')
                            cFile.write ('                _error == ARCONTROLLER_ERROR_ALLOC;\n')
                            cFile.write ('            }\n')
                        elif arg.type == 'enum':
                            cFile.write ('            _argDictNewElement->value.'+ARCapitalize('i32')+' = '+arg.name+';\n')
                        else:
                            cFile.write ('            _argDictNewElement->value.'+ARCapitalize(arg.type)+' = '+arg.name+';\n')
                        cFile.write ('            \n')
                        
                        if arg.type == 'string':
                            cFile.write ('            if (_error == ARCONTROLLER_OK)\n')
                            cFile.write ('            {\n')
                            cFile.write ('                HASH_ADD_KEYPTR (hh, _dictNewElement->arguments, _argDictNewElement, strlen(_argDictNewElement->argument), _argDictNewElement);\n')
                            cFile.write ('            }\n')
                        else:
                            cFile.write ('            HASH_ADD_KEYPTR (hh, _dictNewElement->arguments, _argDictNewElement->argument, strlen(_argDictNewElement->argument), _argDictNewElement);\n')
                        cFile.write ('        }\n')
                        cFile.write ('        else\n')
                        cFile.write ('        {\n')
                        cFile.write ('            _error == ARCONTROLLER_ERROR_ALLOC;\n')
                        cFile.write ('        }\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                    
                    cFile.write ('    if (_error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // Find if the element already exist\n')
                    cFile.write ('        HASH_FIND_INT (_feature->privatePart->dictionary, &(_dictNewElement->command), _dictOldElement);\n')
                    cFile.write ('        if (_dictOldElement != NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            HASH_REPLACE_INT (_feature->privatePart->dictionary, command, _dictNewElement, _dictOldElement);\n')
                    cFile.write ('            \n')
                    
                    cFile.write ('            // TODO see to free old element !!!!!!!!!!!!!!!!!!!!\n')
                    cFile.write ('            ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' (&(_dictOldElement->arguments));\n')
                    cFile.write ('            free (_dictOldElement);\n')
                    cFile.write ('            _dictOldElement = NULL;\n')
                    cFile.write ('        }\n')
                    cFile.write ('        else\n')
                    cFile.write ('        {\n')
                    cFile.write ('            HASH_ADD_INT (_feature->privatePart->dictionary, command, _dictNewElement);\n')
                    cFile.write ('        }\n')
                    cFile.write ('        \n')
                    cFile.write ('        _elementAdded = 1;\n')
                    
                    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "_feature->privatePart->dictionary: %p", _feature->privatePart->dictionary);\n')
                    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "_elementAdded  command: %d", _dictNewElement->command);\n')
                    
                    
                    
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (_error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    #TODO see to copy arguments !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    cFile.write ('        // Callback notification\n')
                    cFile.write ('        _error = ARCONTROLLER_COMMAND_Notify (_feature->privatePart->commandCallbacks, _dictNewElement->command, _argDictNewElement);\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // if an error occurred \n')
                    cFile.write ('    if (_error != ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // cleanup\n')
                    cFile.write ('        if ((_dictNewElement != NULL) && (_elementAdded == 0))\n')
                    cFile.write ('        {\n')
                    cFile.write ('            if (_dictNewElement->arguments != NULL)\n')
                    cFile.write ('            {\n')
                    
                    for arg in cmd.args:
                        if arg.type == 'string':
                            cFile.write ('                if (_dictNewElement->arguments->value.'+ARCapitalize(arg.type)+' != NULL)\n')
                            cFile.write ('                {\n')
                            cFile.write ('                    free(_dictNewElement->arguments->value.'+ARCapitalize(arg.type)+');\n')
                            cFile.write ('                    _dictNewElement->arguments->value.'+ARCapitalize(arg.type)+' = NULL;\n')
                            cFile.write ('                }\n')
                            cFile.write ('                \n')
                    
                    cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, " free(_dictNewElement->arguments):%p", _dictNewElement->arguments);\n')
                    cFile.write ('                free(_dictNewElement->arguments);\n')
                    cFile.write ('                _dictNewElement->arguments = NULL;\n')
                    cFile.write ('            }\n')
                    cFile.write ('            \n')
                    
                    cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, " free(_dictNewElement) _dictNewElement:%p", _dictNewElement);\n')
                    
                    cFile.write ('            free(_dictNewElement);\n')
                    cFile.write ('            _dictNewElement = NULL;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('}\n')
                    cFile.write ('\n')
                    
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+' ('+className+' *feature, ARCONTROLLER_Network_t *networkController)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Set a NetworkController to use to send commands. --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        feature->privatePart->networkController = networkController;\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('ARCONTROLLER_FEATURE_DICTIONARY_ARG_t *' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandArguments')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Get Command Arguments --\n')
        cFile.write ('    \n')
        
        cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandArguments')+' commandKey:%d .......", commandKey);\n')
        
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('    ARCONTROLLER_FEATURE_DICTIONARY_COMMANDS_t *commandDic = NULL;\n')
        cFile.write ('    ARCONTROLLER_FEATURE_DICTIONARY_ARG_t *arguments = NULL;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // check parameters\n')
        cFile.write ('    if ((feature == NULL) ||\n')
        cFile.write ('        (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        
        cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, " for feature->privatePart->dictionary: %p", feature->privatePart->dictionary);\n')
        
        cFile.write ('        // Find arguments\n')
        cFile.write ('        HASH_FIND_INT (feature->privatePart->dictionary, &(commandKey), commandDic);\n')
        cFile.write ('        if (commandDic != NULL)\n')
        cFile.write ('        {\n')
        
        cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_FEATURE_TAG, "finddddddddddddd");\n')
        cFile.write ('            arguments = commandDic->arguments;\n')
        
        #TODO see for copy !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        cFile.write ('           //TODO see for copy !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n')
        cFile.write ('        }\n')
        cFile.write ('        // NO Else ; command not found \n')
        cFile.write ('        \n')
        
        cFile.write ('        if (arguments == NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_NO_ARGUMENTS;\n') # TODO see error !!!!!!!!!!!!!!!!!!!!!
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    // return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return arguments;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('/************************\n')
        cFile.write (' * Private Implementation\n')
        cFile.write (' *************************/\n')
        

    cFile.close () # see automake all source of folder !!!!!!!!
